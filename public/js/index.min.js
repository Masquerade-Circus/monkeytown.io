(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.App = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	!function(){var e,n,o,t,i=[];function d(e,n,o,t,i){if("string"==typeof e){for(t in o={name:e,props:{},children:[],dom:null,isVnode:!0,nt:1,isSVG:"svg"===e},n){ o.props[t]=n[t]; }return d.utils.flat(arguments,2,o.children,!0),o}return "function"==typeof e?Object.assign({view:e,isComponent:!0},n):"object"==typeof e&&("function"==typeof e.view&&Object.assign(e,{isComponent:!0}),e.isComponent)?(i=e.view.apply(e,d.utils.flat(arguments,1,[])),Array.isArray(i)?i:[i]):void 0}function r(e,n){return 3===e.nodeType?{name:"#text",isVnode:!0,nodeValue:e.nodeValue,children:[],dom:e,nt:3}:1===e.nodeType?("svg"===(n={name:e.nodeName.toLowerCase(),props:{},children:[],dom:e,isVnode:!0,nodeValue:null,nt:1}).name&&(n.isSVG=!0),n.dom.events={},Array.prototype.map.call(e.attributes,function(e){n.props[e.nodeName]=e.nodeValue;}),Array.prototype.forEach.call(e.childNodes,function(e){var o=r(e);void 0!==o&&n.children.push(o);}),n):void 0}function s(e,n,o,t,i){if(1===e.nt&&(void 0!==e.props[n]&&e.props[n](e,o),"onremove"===n)){for(t=0,i=e.children.length;t<i;t++){ s(e.children[t],"onremove"); }e.children=[];}}function l(e){void 0!==e.currentTarget.events["on"+e.type]&&e.currentTarget.events["on"+e.type](e),d.update();}d.utils={flat:function(e,n,o,t,i){for(i=e.length,void 0===t&&(t=!1);n<i;n++){ Array.isArray(e[n])?o=d.utils.flat(e[n],0,o):(!1===t||void 0!==e[n]&&null!==e[n])&&o.push(e[n]); }return o}},(d.is={node:"undefined"==typeof window,mounted:!1,updating:!1}).browser=!d.is.node,d.trust=function(e){var n=document.createElement("div");return n.innerHTML=e.trim(),Array.prototype.map.call(n.childNodes,function (e){ return r(e); })},d.update=function(i){return "object"==typeof(i=d.utils.flat(arguments,0,[]))[0]&&i[0].isComponent&&(e=i.shift()),new Promise(function(r){if(!d.is.updating){if(d.is.updating=!0,i.unshift(e),o=d.apply(d,i),function e(n,o,t,i,r,u,p,a,m,c){if(0!==o.length){ for(r=o.length>t.length?o.length:t.length,a=0;a<r;a++){ if(p=t[a],void 0!==(u=o[a])){ if(void 0!==u.nt&&3!==u.nt){if(m=!d.is.mounted,i=i||u.isSVG,void 0===p){ s(u,"oninit"),u.dom=i?document.createElementNS("http://www.w3.org/2000/svg",u.name):document.createElement(u.name),u.dom.events={},n.appendChild(u.dom),p={children:[]},m=!0; }else if(u.name!==p.name){ s(u,"oninit"),u.dom=i?document.createElementNS("http://www.w3.org/2000/svg",u.name):document.createElement(u.name),u.dom.events={},s(p,"onremove"),n.replaceChild(u.dom,p.dom),m=!0; }else { for(c in u.dom=p.dom,p.props){ if(void 0===u.props[c]){if("function"==typeof p.props[c]){u.dom.removeEventListener(c.slice(2),l);continue}if(d.is.node||i||void 0===u.dom[c]){u.dom.removeAttribute(c);continue}u.dom[c]=null;} } }for(c in e(u.dom,u.children,p.children,i),u.props){ if((m||u.props[c]!==p.props[c])&&void 0!==u.props[c]){if("function"==typeof u.props[c]){switch(c){case"oninit":case"oncreate":case"onupdate":case"onremove":break;default:void 0===u.dom.events[c]&&(u.dom.events[c]=u.props[c],u.dom.addEventListener(c.slice(2),l));}continue}if(d.is.node||i||void 0===u.dom[c]){u.dom.setAttribute(c,u.props[c]);continue}u.dom[c]=u.props[c];} }d.is.mounted||m||(s(u,"oninit"),s(u,"oncreate")),s(u,m?"oncreate":"onupdate",p);}else { void 0===u.nt&&(o[a]=u={name:"#text",isVnode:!0,nodeValue:u,children:[],nt:3}),void 0===p?(u.dom=document.createTextNode(u.nodeValue),n.appendChild(u.dom)):1===p.nt?(u.dom=document.createTextNode(u.nodeValue),s(p,"onremove"),n.replaceChild(u.dom,p.dom)):(u.dom=p.dom,u.nodeValue!=p.nodeValue&&(u.dom.nodeValue=u.nodeValue)); } }else { void 0!==p&&(3===p.nt&&s(p,"onremove"),n.removeChild(p.dom)); } } }else { n.textContent=""; }}(t,o,n),n=o,d.is.updating=!1,d.is.mounted=!0,d.is.node){ return r(t.innerHTML); }r();}})},d.mount=function(e,o){return t=d.is.node?document.createElement("div"):"string"==typeof e?document.querySelectorAll(e)[0]:e,n=r(t).children,d.update.apply(this,d.utils.flat(arguments,1,[]))},d.use=function(e,n){return -1===i.indexOf(e)&&(e(d,n),i.push(e)),d},(d.is.node?commonjsGlobal:window).v=d;}();

	var plugin = function (v) {
	    var Request = function (baseUrl, options) {
	        if ( baseUrl === void 0 ) baseUrl = '';
	        if ( options === void 0 ) options = {};

	        var url = baseUrl.replace(/\/$/gi, '').trim(),
	            opts = Object.assign({
	                methods: ['get', 'post', 'put', 'patch', 'delete']
	            }, options),
	            parseUrl;

	        function serialize(obj, prefix) {
	            var e = encodeURIComponent;
	            return Object.keys(obj)
	                .map(function (p) {
	                    var k = prefix ? prefix + '[' + p + ']' : p;

	                    return typeof obj[p] === 'object'
	                        ? serialize(obj[p], k)
	                        : e(k) + '=' + e(obj[p]);
	                })
	                .join('&');
	        }

	        function request(method, url, data, options) {
	            if ( options === void 0 ) options = {};

	            var opts = Object.assign({
	                    method: method.toLowerCase(),
	                    headers: {
	                        'Accept': 'application/json',
	                        'Content-Type': 'application/json'
	                    }
	                }, request.options, options),
	                type = opts.headers.Accept;

	            if (data !== undefined) {
	                if (opts.method === 'get' && typeof data === 'object') {
	                    url += data = serialize(data);
	                }

	                if (opts.method !== 'get') {
	                    opts.body = JSON.stringify(data);
	                }
	            }

	            return fetch(parseUrl(url), opts)
	                .then(function (response) {
	                    if (!response.ok) {
	                        var err = new Error(response.statusText);
	                        err.response = response;
	                        throw err;
	                    }

	                    if (/text/gi.test(type)) {
	                        return response.text();
	                    }

	                    if (/json/gi.test(type)) {
	                        return response.json();
	                    }

	                    return response;
	                });
	        }
	        parseUrl = function (url) {
	            var u = /^https?/gi.test(url)
	                ? url
	                : (request.urls.base + '/' + url).trim().replace(/^\/\//gi, '/').trim();

	            if (
	                v.is.node &&
	                typeof request.urls.node === 'string'
	            ) {
	                request.urls.node = request.urls.node.replace(/\/$/gi, '').trim();

	                if (/^https?/gi.test(u) && typeof request.urls.api === 'string') {
	                    request.urls.api = request.urls.api.replace(/\/$/gi, '').trim();
	                    u = u.replace(request.urls.api, request.urls.node);
	                }

	                if (!/^https?/gi.test(u)) {
	                    u = request.urls.node + u;
	                }
	            }

	            return u;
	        };

	        request.new = function (baseUrl, options) {
	            return Request(baseUrl, options);
	        };

	        request.urls = {};
	        request.urls.api = undefined;
	        request.urls.node = undefined;
	        request.urls.base = url;
	        request.options = opts;

	        opts.methods.forEach(function (method) { return request[method] = function (url, data, options) { return request(method, url, data, options); }; }
	        );

	        return request;
	    };

	    v.request = Request();
	};

	function __async(g){return new Promise(function(s,j){function c(a,x){try{var r=g[x?"throw":"next"](a);}catch(e){j(e);return}r.done?s(r.value):Promise.resolve(r.value).then(c,d);}function d(e){c(e,1);}c();})}

	/**
	 * Handles the mix of single and array of middlewares
	 * @method parseMiddlewares
	 * @param  {Function|Array}         middlewares     // Middleware or array of middlewares
	 * @param  {Array}                  [array=[]]      // The array to store the final list of middlewares
	 * @return {Array}                                  // The final list of middlewares
	 */
	var parseMiddlewares = function (middlewares, array) {
	    if ( array === void 0 ) array = [];

	    if (typeof middlewares === 'function') {
	        array.push(middlewares);
	        return array;
	    }

	    var i = 0, l = middlewares.length;
	    for (; i < l; i++) {
	        if (Array.isArray(middlewares[i])) {
	            parseMiddlewares(middlewares[i], array);
	            continue;
	        }

	        array.push(middlewares[i]);
	    }
	    return array;
	};

	/**
	 * @description Adds a path to a router
	 * @method addPath
	 * @param  {Router} router              The router in which to add the path
	 * @param  {String} method              The method that will handle this path
	 * @param  {Array} args                The mixed params (String|Function|Array)
	 * @returns {Router}                    The router
	 */
	var addPath = function (router, method, args) {
	    var path, middlewares;

	    // Get the first argument
	    if (typeof args[0] === 'string') {
	        path = args.shift();
	    }

	    // If the seccond argument is a function and has paths
	    // and regexpList properties then
	    // Treat it as a subrouter
	    if (
	        typeof args[0] === 'function' &&
	        args[0].paths &&
	        args[0].regexpList
	    ) {
	        var subrouter = args.shift(),
	            i = 0,
	            l = subrouter.paths.length;

	        // For each path of the subrouter
	        for (; i < l; i++) {
	            var submiddlewares = subrouter.paths[i].middlewares;
	            var submethod = subrouter.paths[i].method;
	            var subpath = subrouter.paths[i].path;

	            // If there is a path add it as prefix to the subpath
	            if (path) {
	                subpath = path + (subpath || '*');
	            }

	            // If there is a subpath set it as the first element
	            // on the submiddlewares array
	            if (subpath) {
	                submiddlewares.unshift(subpath);
	            }

	            // Add the path to the router
	            router = addPath(router, submethod, submiddlewares);
	        }
	    }

	    // Parse middlwares to handle mixed arrays of middlwares and sequenced middlwares
	    middlewares = parseMiddlewares(args);

	    // Add the path only if there are middlewares passed
	    if (middlewares.length > 0) {
	        // If the path wasn't set before, set the regexp and params list
	        if (path && router.regexpList[path] === undefined) {
	            // Remove the last slash
	            path = path.replace(/\/(\?.*)?$/gi, '$1');

	            // Find the express like params
	            var params = path.match(/:(\w+)?/gi) || [];

	            // Set the names of the params found
	            for (var i$1 in params) {
	                params[i$1] = params[i$1].slice(1);
	            }

	            var regexpPath = path
	                // Catch params
	                .replace(/:(\w+)/gi, '([^\\s\\/|\\?]+)')
	                // To set to any url with the path as prefix
	                .replace(/\*/g, '.*')
	                // Remove the last slash
	                .replace(/\/(\?.*)?$/gi, '$1');

	            // Set the object to the path
	            router.regexpList[path] = {
	                regexp: new RegExp('^' + regexpPath + '/?(\\?.*)?$', 'gi'),
	                params: params
	            };
	        }

	        // Add the path to the paths list
	        router.paths.push({
	            method: method,
	            path: path,
	            middlewares: middlewares
	        });
	    }

	    return router;
	};

	var RouterFactory = function () {
	    /**
	     * new Rotuer
	     * @param  {String}    url     The path to call
	     * @return {Any}           The final response
	     */
	    var Router = function (url) {
	    if ( url === void 0 ) url = '/';
	return __async(function*(){
	        var method = 'get',
	            params = {},
	            middlewares = [],
	            response,
	            i = 0,
	            l = Router.paths.length;

	        Router.url = url;

	        for (; i < l; i++) {
	            var path = Router.paths[i];
	            if (method !== path.method && path.method !== 'use') {
	                continue;
	            }

	            if ((path.method === 'use' || method === path.method) && path.path === undefined) {
	                parseMiddlewares(path.middlewares, middlewares);
	                continue;
	            }

	            var reg = Router.regexpList[path.path];
	            var matches = reg.regexp.exec(url);
	            reg.regexp.lastIndex = -1;
	            if (Array.isArray(matches)) {
	                matches.shift();
	                var regparams = reg.params;
	                var l$1 = regparams.length;
	                for (; l$1--;) {
	                    if (params[regparams[l$1]] === undefined) {
	                        params[regparams[l$1]] = matches[l$1];
	                    }
	                }
	                parseMiddlewares(path.middlewares, middlewares);
	            }
	        }

	        Router.params = params;

	        if (middlewares.length > 0) {
	            var i$1 = 0, l$2 = middlewares.length;
	            // call sequentially every middleware
	            for (; i$1 < l$2; i$1++) {
	                response = yield middlewares[i$1](params);
	                // If there is a response
	                // break the for block
	                if (response) {
	                    return response;
	                }
	            }
	        }

	        if (Router.throwNotFound) {
	            // If no response was sent to the client throw an error
	            throw new Error(("The url " + url + " requested wasn't found"));
	        }
	    }())};

	    Router.url = '/';
	    Router.params = {};
	    Router.throwNotFound = true;

	    /**
	     * Where to store the paths and its middlewares
	     * @type {Object}
	     */
	    Router.paths = [];

	    /**
	     * Where to store the regexp and params list for the paths
	     * @type {[type]}
	     */
	    Router.regexpList = {};

	    // For each accepted method, add the method to the router
	    Router.get = function () {
	        return addPath(Router, 'get', v.utils.flat(arguments, 0, []));
	    };
	    Router.use = function () {
	        return addPath(Router, 'use', v.utils.flat(arguments, 0, []));
	    };

	    /**
	     * Return the new router
	     * @type {Router}
	     */
	    return Router;
	};


	var plugin$1 = function (v) {
	    var mainRouter;
	    var RoutesContainer;
	    function runRoute(parentComponent, url, args) {
	        return mainRouter(url)
	            .then(function (response) {
	                if (typeof response !== 'object') {
	                    throw new Error('v.router.component.required');
	                }

	                if (!response.isComponent && typeof response.view === 'function') {
	                    Object.assign(response, {isComponent: true});
	                }

	                if (!response.isComponent) {
	                    throw new Error('v.router.component.required');
	                }

	                if (parentComponent) {
	                    args.unshift(v(response, args));
	                    response = parentComponent;
	                }

	                args.unshift(response);

	                if (v.is.node || !v.is.mounted) {
	                    args.unshift(RoutesContainer);
	                    return v.mount.apply(v, args);
	                }

	                return v.update.apply(v, args);
	            });
	    }
	    v.routes = function (elementContainer, router) {
	        if (elementContainer && router) {
	            mainRouter = router;
	            RoutesContainer = elementContainer;
	            // Activate the use of the router
	            if (v.is.browser) {
	                function onPopStateGoToRoute() {
	                    v.routes.go(document.location.pathname);
	                }
	                window.addEventListener('popstate', onPopStateGoToRoute, false);
	                onPopStateGoToRoute();
	            }
	        }
	    };

	    v.routes.get = function () {
	        var routes = [];
	        mainRouter.paths.forEach(function (path) {
	            if (path.method === 'get') {
	                routes.push(path.path === '' ? '/' : path.path);
	            }
	        });
	        return routes;
	    };

	    v.routes.current = '/';
	    v.routes.params = {};

	    v.routes.go = function () {
	        var args = v.utils.flat(arguments, 0, []);
	        var parentComponent;
	        var url;

	        if (typeof args[0] === 'object') {
	            if (!args[0].isComponent && typeof args[0].view === 'function') {
	                args[0] = Object.assign(args[0], {isComponent: true});
	            }

	            if (args[0].isComponent) {
	                parentComponent = args.shift();
	            }
	        }

	        if (typeof args[0] === 'string') {
	            url = args.shift();
	        }

	        if (!url) {
	            throw new Error('v.router.url.required');
	        }

	        if (v.is.browser) {
	            window.history.pushState({}, '', url);
	        }

	        return runRoute(parentComponent, url, args);
	    };

	    v.Router = RouterFactory;
	};

	var plugin$2 = function (v) {
	    if (v.is.browser) {
	        v.sw = function (file, options) {
	            if ( file === void 0 ) file = v.sw.file;
	            if ( options === void 0 ) options = v.sw.options;

	            return navigator.serviceWorker.register(file, options)
	                .then(function () { return navigator.serviceWorker.ready; })
	                .then(function (registration) {
	                    v.sw.ready = true;
	                    v.sw.file = file;
	                    v.sw.options = options;
	                    return new Promise(function (resolve, reject) {
	                        setTimeout(function () {
	                            resolve(navigator.serviceWorker);
	                        }, 10);
	                    });
	                });
	        };

	        v.sw.ready = false;
	        v.sw.file = '/sw.js';
	        v.sw.options = {scope: '/'};
	    }
	};

	v
	    .use(plugin$1)
	    .use(plugin)
	    .use(plugin$2)
	;

	var displayName = "MonkeyTown.io";
	var description = "Awesome hybrid 3d/2d Survival IO game";
	var version = "0.0.2";

	var icons = "<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"><symbol id=\"axe\" viewBox=\"0 0 439.374 439.375\"><path d=\"M75.879,433.771c-0.05,0.047-0.103,0.088-0.147,0.135l-1.864,1.859c-0.378,0.141-0.743,0.33-1.082,0.551 c-7.391,4.877-17.866,3.827-24.168-2.473c-6.402-6.403-7.448-16.542-2.499-24.104c0.231-0.358,0.414-0.736,0.544-1.135 l229.137-229.136c5.064,3.629,9.931,7.467,14.498,11.441c3.633,3.17,7.134,6.438,10.414,9.729c1.293,1.284,2.548,2.585,3.775,3.879 C209.978,299.354,75.879,433.771,75.879,433.771z\"/><path d=\"M320.073,205.147c-2-2.436-3.9-4.646-5.81-6.769l-1.124-1.278c-0.566-0.651-1.13-1.302-1.748-1.958 c-1.538-1.623-3.093-3.245-4.683-4.833c-3.438-3.444-7.123-6.885-10.951-10.218c-5.968-5.192-12.408-10.161-19.134-14.762 c-27.654-18.897-57.767-29.305-84.793-29.305c-11.695,0-22.48,1.924-32.14,5.73c-6.709-33.396,7.499-73.09,37.294-102.886 C221.692,14.164,253.096,0,283.145,0c2.997,0,5.979,0.145,8.893,0.441c2.84,23.888,22.666,59.329,54.031,96.225 c2.158,2.549,4.368,5.091,6.646,7.648c6.284,7.068,12.815,13.998,19.396,20.583c1.891,1.892,3.786,3.693,5.687,5.494l2.021,1.926 c2.247,2.15,4.493,4.257,6.739,6.336L320.073,205.147z\"/><path d=\"M395.98,109.857c-0.031,0.027-0.069,0.053-0.096,0.082c-0.172,0.155-0.34,0.321-0.493,0.494 c-0.665,0.697-4.324,4.396-10.356,10.472c-1.239-1.183-2.478-2.383-3.711-3.614c-6.436-6.439-12.819-13.213-18.961-20.119 c-1.104-1.236-2.188-2.473-3.261-3.707l7.649-7.648c1.512-0.586,2.603-1.569,3.013-1.971c0.299-0.301,0.981-0.47,1.868-0.47 c3.565,0,9.881,2.723,15.954,8.801c3.868,3.867,6.828,8.35,8.126,12.305C396.62,107.277,396.453,109.062,395.98,109.857z\"/></symbol><symbol id=\"knife\" viewBox=\"0 0 293.296 293.296\"><path d=\"M36.164,237.742l-16.665,16.699c-6.023,6.037-7.612,14.478-4.247,22.587c3.908,9.425,13.606,16.266,23.057,16.268 c0.002,0,0.002,0,0.004,0c5.332,0,10.199-2.053,14.081-5.94c8.909-8.93,7.685-16.982,6.878-22.311 c-0.628-4.115-0.836-5.501,2.44-8.788c3.716-3.724,7.218-5.291,12.515-7.663c8.971-4.016,21.25-9.514,40.538-28.84l20.561-20.997 l-24.537-24.524c-1.976-1.981-3.503-4.239-4.623-6.638L36.164,237.742z\"/><path d=\"M271.677,2.046c-38.582,37.338-149.718,150.127-149.718,150.127c-3.006,3.007-3.006,7.886,0,10.892l35.705,35.697 c1.504,1.504,3.475,2.259,5.445,2.259s3.94-0.755,5.444-2.259c0,0,44.754-45.061,59.726-60.031 c18.369-18.365,58.232-73.759,50.522-135.435C278.427,0.296,275.552-1.704,271.677,2.046z\"/></symbol><symbol id=\"spear\" viewBox=\"0 0 512.006 512.006\"><g> <g> <path d=\"M463.532,10.605L452.926,0L319.519,133.409l-21.236-21.236l-21.21,21.21l28.996,28.996l-21.244,21.244l63.665,63.665 l21.244-21.244l28.996,28.997l21.21-21.21l-21.236-21.236l64.828-64.827C501.347,109.951,501.347,48.421,463.532,10.605z\"/> </g> </g><g> <g> <rect x=\"1.514\" y=\"313.402\" transform=\"matrix(0.7071 -0.7071 0.7071 0.7071 -202.5675 227.8011)\" width=\"344.364\" height=\"90.038\"/> </g> </g></symbol><symbol id=\"apple\" viewBox=\"0 0 834.277 834.277\"><path d=\"M326.253,831.194c28.94,11.474,64.358-12.77,90.886-12.77s64.594,18.728,85.64,12.77 c157.822-44.681,256.411-277.904,256.411-389.026c0-74.659-23.693-163.348-131.914-209.334 c-96.918-41.184-127.087-2.674-187.582,5.82c-0.333-8.656-0.826-17.307-1.479-25.949c20.434-15.906,61.406-41.836,126.921-58.151 C664.995,129.686,703.332,7.913,703.332,7.913S581.663-18.831,506.938,26.016c-42.501,25.507-65.042,80.093-76.584,122.434 c-5.162-30.444-12.346-60.542-21.532-89.987c-1.635-8.378-3.526-15.559-5.716-20.924c-15.569-38.151-60.24-19.599-60.24,0 c0,13.014,7.262,19.578,15.315,26.588c10.123,31.142,17.968,62.968,23.496,95.252c0.744,4.345,1.427,8.7,2.085,13.059 c0.282,1.868,0.548,3.738,0.814,5.609c0.042,0.302,0.076,0.56,0.108,0.79c0.083,0.642,0.168,1.284,0.249,1.927 c1.119,8.745,2.027,17.516,2.799,26.298c0.91,10.351,1.545,20.725,1.947,31.109c-61.418-9.045-103.016-43.477-182.739-11.146 C115.922,263.937,75.088,368.137,75.088,442.17C75.088,547.129,181.458,773.787,326.253,831.194z M175.043,364.905 c0-27.256,22.744-50,50-50c27.256,0,50,22.744,50,50s-22.744,50-50,50C197.788,414.905,175.043,392.161,175.043,364.905z\"/></symbol><symbol id=\"wood\" viewBox=\"0 0 59.987 59.987\"><path d=\"M16.459,14.408c0.199-0.404,0.341-0.763,0.445-1.084l-0.635-0.635c-0.66-0.659-1.966-0.73-2.497-0.73 c-1.989,0-3.98,0.851-5.464,2.335c-2.751,2.751-4.107,8.012-2.881,9.238l0.379,0.379c1.331-0.115,3.892-1.455,6.694-4.257 C14.223,17.93,15.667,16.018,16.459,14.408z\"/><path d=\"M54.958,7.499L54.958,7.499C54.957,2.874,48.06,0,36.958,0c-11.103,0-18,2.874-18,7.5l0.021,3.877 c0.142,0.478,0.171,1.09,0.01,1.864l0.012,2.182l-0.56-0.561c-0.064,0.144-0.112,0.277-0.187,0.43 c-0.898,1.825-2.439,3.877-4.34,5.777c-2.04,2.04-4.401,3.771-6.458,4.492l11.559,11.559V53.5c0,2.034,1.781,3.674,4.979,4.799 l-0.035-14.297c-0.001-0.552,0.445-1.001,0.998-1.002c0.001,0,0.001,0,0.002,0c0.551,0,0.999,0.446,1,0.998l0.036,14.888 c1.465,0.362,3.131,0.643,4.992,0.83l-0.029-8.713c-0.002-0.552,0.444-1.001,0.997-1.003c0.001,0,0.002,0,0.003,0 c0.551,0,0.998,0.445,1,0.997l0.029,8.883c0.947,0.059,1.945,0.09,2.971,0.105V56c0-0.552,0.448-1,1-1s1,0.448,1,1v3.987 c0.695-0.009,1.373-0.028,2.032-0.058l-0.032-10.926c-0.001-0.552,0.445-1.001,0.997-1.003c0.001,0,0.002,0,0.003,0 c0.551,0,0.999,0.446,1,0.997l0.032,10.809c1.433-0.114,2.774-0.274,3.995-0.487l-0.027-7.315 c-0.002-0.552,0.444-1.002,0.996-1.004c0.001,0,0.003,0,0.004,0c0.551,0,0.998,0.445,1,0.996l0.026,6.903 c4.478-1.097,7.03-2.966,7.03-5.4L54.958,7.499z M36.958,2c10.993,0,16,2.851,16,5.5c0,0.157-0.021,0.314-0.056,0.472 c-0.004,0.021-0.011,0.041-0.016,0.061C52.258,10.517,47.216,13,36.958,13c-10.993,0-16-2.851-16-5.5S25.965,2,36.958,2z M24.958,21c-0.552,0-1-0.448-1-1v-6.954c0.613,0.248,1.285,0.471,2,0.675V20C25.958,20.552,25.51,21,24.958,21z M29.958,28 c-0.552,0-1-0.448-1-1V14.388c0.642,0.109,1.305,0.207,2,0.287V27C30.958,27.552,30.51,28,29.958,28z M38.958,18 c-0.001,0-0.002,0-0.004,0c-0.552-0.002-0.999-0.452-0.996-1.004l0.008-2.013c0.684-0.011,1.351-0.034,2-0.067l-0.008,2.087 C39.956,17.555,39.508,18,38.958,18z M45.958,29c0,0-0.001,0-0.002,0c-0.552-0.001-0.999-0.45-0.998-1.002l0.031-13.615 c0.7-0.12,1.367-0.256,2.001-0.409l-0.031,14.029C46.957,28.554,46.509,29,45.958,29z M49.958,21c-0.552,0-1-0.448-1-1v-6.582 c0.732-0.247,1.394-0.524,2-0.823V20C50.958,20.552,50.51,21,49.958,21z\"/></symbol><symbol id=\"stone\" viewBox=\"0 0 961.801 961.801\"><path d=\"M825.4,503.05c0,1.801,0.1,3.6,0.1,5.201c0,13.799-3.9,27.299-11.699,40.199c-6.801,11.199-16.5,22-29,32 c-22.4,18-53.801,33.9-93.201,47.199c-78,26.4-181.1,41-290.5,41c-107.9,0-191.5-14.199-248.3-42.299 c-9.6-4.701-18.4-9.9-26.4-15.4C49.9,652.751,0,695.751,0,728.251c0,90,215.3,163.1,480.9,163.1s480.901-73,480.901-163.1 C961.801,663.649,937.199,557.751,825.4,503.05z M742.6,808.351c-95.699,21.799-178.5,16.5-185-11.801 c-6.4-28.299,119.4-113.1,215.1-134.9c95.701-21.799,125.102,27.801,131.5,56C910.699,746.05,838.301,786.649,742.6,808.351z\"/><path d=\"M151.8,597.649c48.9,28.201,129.6,46.102,249.2,46.102c220.6,0,399.401-60.701,399.401-135.5 c0-5.102-0.201-10.5-0.6-16.201c-2.701-36.7-15-83.6-49.201-122.799c-60.6,20-137.5,30.899-218.5,30.899 c-87.6,0-170.299-12.8-233-35.899c-9.601-3.5-18.6-7.301-27-11.2c-105.4,47.5-180.2,112.3-180.2,155.201 C91.9,542.45,110.5,573.751,151.8,597.649z M643.301,449.15c55.5-12.6,82.1,6.4,93.898,26c3.801,6.3,6.102,12.701,7.301,18.101 c5,22.1-50.5,53.5-123.9,70.199s-137.1,12.4-142.1-9.699C474.8,537.55,525.9,497.649,582.4,471.05 C602.699,461.35,623.801,453.55,643.301,449.15z\"/><path d=\"M272.8,325.45c4.7,2.5,9.7,4.9,14.9,7.2c5.3,2.4,10.8,4.6,16.5,6.8c57.7,22,138.4,35.7,227.8,35.7 c75.1,0,144.1-9.7,198.4-25.8c4.699-1.4,9.4-2.9,13.9-4.4s8.898-3.1,13.199-4.7c56.699-21.2,91.6-50.3,91.6-82.5 c0-64.8-252.5-187.3-427.7-187.3c-175.2,0-206.5,122.6-206.5,187.4C214.9,283.05,236.4,306.35,272.8,325.45z M605.801,271.45 c3-16.4,14.398-33.9,45.299-42c12.301-3.2,26.5-4.6,41-4.6c43.201,0,88.801,12.4,92.301,26c4.5,17.4-28.301,41.1-74.201,54.2 c-2,0.6-4,1.1-6,1.6c-4.199,1.1-8.299,2-12.299,2.9c-8,1.6-15.801,2.8-23.1,3.5c-5.9,0.6-11.602,0.9-17,0.9 c-24.4,0-42-6-44.801-17.1v-0.1c-0.9-3.7-1.699-8.1-1.9-12.9C604.801,279.95,605,275.75,605.801,271.45z\"/></symbol><symbol id=\"skull-and-bones\" viewBox=\"0 0 264.695 264.695\"><path style=\"fill:#030104;\" d=\"M219.171,216.785c-4.762,0-10.322,2.3-16.672,6.881l-35.211-12.968l35.734-12.978 c6.003,3.888,11.558,5.833,16.682,5.833c5.639,0,9.347-2.917,11.117-8.733c0.351-1.235,0.527-2.57,0.527-3.981 c0-7.397-4.766-11.378-14.295-11.9c3.876-3.882,5.828-7.687,5.828-11.392c0-3.871-2.039-7.149-6.092-9.797 c-2.118-1.049-4.325-1.584-6.615-1.584c-7.769,0-13.064,6.258-15.887,18.797l-61.941,23.039l-61.94-22.504 c-2.823-12.885-8.125-19.332-15.885-19.332c-2.293,0-4.501,0.535-6.62,1.584c-3.876,2.647-5.82,5.926-5.82,9.797 c0,3.705,1.944,7.51,5.82,11.392c-9.701,0.522-14.555,4.503-14.555,11.901c0,1.41,0.179,2.746,0.526,3.98 c1.946,5.816,5.651,8.733,11.122,8.733c5.113,0,10.671-1.945,16.677-5.832l35.998,12.977l-35.476,12.698 c-6.175-4.406-11.637-6.611-16.402-6.611c-5.654,0-9.623,2.918-11.919,8.733c-0.348,1.235-0.526,2.553-0.526,3.975 c0,7.405,4.853,11.385,14.555,11.907c-3.876,3.883-5.82,7.688-5.82,11.393c0,3.869,1.944,7.134,5.82,9.797 c2.477,1.412,4.854,2.105,7.153,2.105c7.227,0,12.443-6.176,15.619-18.525l61.673-22.504l61.678,22.504 c3.178,12.35,8.475,18.525,15.882,18.525c2.121,0,4.407-0.693,6.884-2.105c4.052-2.663,6.092-5.928,6.092-9.797 c0-3.705-1.953-7.51-5.828-11.393c9.528-0.522,14.295-4.502,14.295-11.907c0-1.422-0.177-2.739-0.527-3.975 C228.702,219.702,224.82,216.785,219.171,216.785z\"/><path style=\"fill:#030104;\" d=\"M48.436,128.904c9.703,11.114,23.379,19.242,41.035,24.346v3.986c0,4.936,1.672,9.086,5.025,12.433 c3.35,3.358,7.498,5.211,12.441,5.563c5.116,0.357,8.905-0.528,11.378-2.646c3.879,2.817,8.204,4.229,12.974,4.229 c4.41,0,8.474-1.316,12.175-3.963c2.471,1.934,6.087,2.738,10.856,2.381c4.937-0.528,9.089-2.426,12.44-5.689 c3.35-3.281,5.025-7.371,5.025-12.307v-2.91c19.057-4.945,33.795-13.237,44.21-24.898c10.059-11.109,15.087-24.253,15.087-39.435 c0-3.359-0.355-6.886-1.063-10.597c-3.525-22.571-13.938-41.201-31.229-55.844C180.612,7.856,158.464,0,132.347,0 c-26.123,0-48.27,7.767-66.44,23.282C48.61,38.118,38.289,56.825,34.937,79.396c-0.709,3.711-1.064,7.238-1.064,10.597 C33.873,104.817,38.724,117.778,48.436,128.904L48.436,128.904z M152.865,60.749c5.206-6.085,11.514-9.13,18.922-9.13 c7.592,0,13.986,3.045,19.194,9.13c5.2,6.076,7.81,13.446,7.81,22.087c0,8.649-2.609,16.021-7.81,22.108 c-5.208,6.097-11.603,9.13-19.194,9.13c-7.408,0-13.716-3.033-18.922-9.13c-5.211-6.087-7.814-13.459-7.814-22.108 C145.05,74.195,147.654,66.825,152.865,60.749z M124.805,121.428c2.556-3.307,5.065-4.968,7.542-4.968 c2.47,0,4.802,1.831,7.012,5.509c2.205,3.662,3.317,7.145,3.317,10.469c0,5.062-3.361,7.581-10.067,7.581 c-4.414,0-7.677-1.136-9.792-3.396c-1.237-1.411-1.849-3.147-1.849-5.249C120.969,128.065,122.245,124.752,124.805,121.428z M71.465,60.749c5.295-6.085,11.65-9.13,19.059-9.13c7.406,0,13.762,3.045,19.06,9.13c5.296,6.076,7.948,13.446,7.948,22.087 c0,8.649-2.651,16.021-7.948,22.108c-5.297,6.097-11.654,9.13-19.06,9.13c-7.409,0-13.764-3.033-19.059-9.13 c-5.292-6.087-7.944-13.459-7.944-22.108C63.521,74.195,66.173,66.825,71.465,60.749z\"/></symbol><symbol id=\"down-arrow\" viewBox=\"0 0 284.929 284.929\"><path d=\"M282.082,76.511l-14.274-14.273c-1.902-1.906-4.093-2.856-6.57-2.856c-2.471,0-4.661,0.95-6.563,2.856L142.466,174.441 L30.262,62.241c-1.903-1.906-4.093-2.856-6.567-2.856c-2.475,0-4.665,0.95-6.567,2.856L2.856,76.515C0.95,78.417,0,80.607,0,83.082 c0,2.473,0.953,4.663,2.856,6.565l133.043,133.046c1.902,1.903,4.093,2.854,6.567,2.854s4.661-0.951,6.562-2.854L282.082,89.647 c1.902-1.903,2.847-4.093,2.847-6.565C284.929,80.607,283.984,78.417,282.082,76.511z\"/></symbol><symbol id=\"up-arrow\" viewBox=\"0 0 284.929 284.929\"><path d=\"M282.082,195.285L149.028,62.24c-1.901-1.903-4.088-2.856-6.562-2.856s-4.665,0.953-6.567,2.856L2.856,195.285 C0.95,197.191,0,199.378,0,201.853c0,2.474,0.953,4.664,2.856,6.566l14.272,14.271c1.903,1.903,4.093,2.854,6.567,2.854 c2.474,0,4.664-0.951,6.567-2.854l112.204-112.202l112.208,112.209c1.902,1.903,4.093,2.848,6.563,2.848 c2.478,0,4.668-0.951,6.57-2.848l14.274-14.277c1.902-1.902,2.847-4.093,2.847-6.566 C284.929,199.378,283.984,197.188,282.082,195.285z\"/></symbol><symbol id=\"mute\" viewBox=\"0 -14 445.05139 445\"><path d=\"m121.601562 291.226562 166.398438 124.800782v-416.0000002l-166.398438 124.7968752c-2.769531 2.078125-6.140624 3.203125-9.601562 3.203125h-112v160h112c3.460938 0 6.832031 1.121094 9.601562 3.199218zm0 0\"/><path d=\"m406.625 208.027344 33.933594-33.9375c6.066406-6.277344 5.976562-16.257813-.195313-22.429688s-16.148437-6.257812-22.425781-.195312l-33.9375 33.9375-33.9375-33.9375c-6.277344-6.0625-16.253906-5.976563-22.425781.195312s-6.261719 16.152344-.195313 22.429688l33.933594 33.9375-33.933594 33.933594c-4.160156 4.019531-5.828125 9.96875-4.363281 15.5625s5.832031 9.960937 11.425781 11.425781c5.59375 1.464843 11.542969-.203125 15.558594-4.363281l33.9375-33.9375 33.9375 33.9375c6.277344 6.0625 16.253906 5.976562 22.425781-.195313s6.261719-16.152344.195313-22.429687zm0 0\"/></symbol><symbol id=\"speaker\" viewBox=\"0 -15 447.99783 447\"><path d=\"m121.601562 291.699219 166.398438 124.800781v-416l-166.398438 124.800781c-2.769531 2.074219-6.140624 3.199219-9.601562 3.199219h-112v160h112c3.460938 0 6.832031 1.121094 9.601562 3.199219zm0 0\"/><path d=\"m389.824219 326.324219c-6.46875-.003907-12.304688-3.902344-14.777344-9.878907-2.476563-5.976562-1.109375-12.859374 3.464844-17.433593 49.992187-49.988281 49.992187-131.039063 0-181.023438-4.160157-4.019531-5.828125-9.96875-4.363281-15.5625 1.464843-5.59375 5.832031-9.960937 11.425781-11.425781 5.597656-1.464844 11.542969.203125 15.5625 4.363281 62.480469 62.484375 62.480469 163.789063 0 226.273438-3 3-7.070313 4.683593-11.3125 4.6875zm0 0\"/><path d=\"m344.574219 281.058594c-6.46875 0-12.300781-3.898438-14.777344-9.878906-2.476563-5.976563-1.105469-12.855469 3.46875-17.433594 24.984375-24.992188 24.984375-65.503906 0-90.496094-6.066406-6.277344-5.976563-16.257812.191406-22.429688 6.171875-6.171874 16.152344-6.257812 22.429688-.195312 37.476562 37.488281 37.476562 98.257812 0 135.746094-3 3-7.066407 4.6875-11.3125 4.6875zm0 0\"/></symbol><symbol id=\"comment-black-oval-bubble-shape\" viewBox=\"0 0 511.626 511.626\"><path d=\"M477.371,127.44c-22.843-28.074-53.871-50.249-93.076-66.523c-39.204-16.272-82.035-24.41-128.478-24.41 c-34.643,0-67.762,4.805-99.357,14.417c-31.595,9.611-58.812,22.602-81.653,38.97c-22.845,16.37-41.018,35.832-54.534,58.385 C6.757,170.833,0,194.484,0,219.228c0,28.549,8.61,55.3,25.837,80.234c17.227,24.931,40.778,45.871,70.664,62.811 c-2.096,7.611-4.57,14.846-7.426,21.693c-2.855,6.852-5.424,12.474-7.708,16.851c-2.286,4.377-5.376,9.233-9.281,14.562 c-3.899,5.328-6.849,9.089-8.848,11.275c-1.997,2.19-5.28,5.812-9.851,10.849c-4.565,5.048-7.517,8.329-8.848,9.855 c-0.193,0.089-0.953,0.952-2.285,2.567c-1.331,1.615-1.999,2.423-1.999,2.423l-1.713,2.566c-0.953,1.431-1.381,2.334-1.287,2.707 c0.096,0.373-0.094,1.331-0.57,2.851c-0.477,1.526-0.428,2.669,0.142,3.433v0.284c0.765,3.429,2.43,6.187,4.998,8.277 c2.568,2.092,5.474,2.95,8.708,2.563c12.375-1.522,23.223-3.606,32.548-6.276c49.87-12.758,93.649-35.782,131.334-69.097 c14.272,1.522,28.072,2.286,41.396,2.286c46.442,0,89.271-8.138,128.479-24.417c39.208-16.272,70.233-38.448,93.072-66.517 c22.843-28.062,34.263-58.663,34.263-91.781C511.626,186.108,500.207,155.509,477.371,127.44z\"/></symbol><symbol id=\"placeholder-on-map-paper-in-perspective\" viewBox=\"0 0 612 612\"><path d=\"M516.316,337.52l94.233,193.581c3.832,7.873-0.196,14.314-8.952,14.314H10.402c-8.756,0-12.785-6.441-8.952-14.314 L95.684,337.52c1.499-3.079,5.528-5.599,8.952-5.599h80.801c2.49,0,5.853,1.559,7.483,3.442 c5.482,6.335,11.066,12.524,16.634,18.65c5.288,5.815,10.604,11.706,15.878,17.735h-95.891c-3.425,0-7.454,2.519-8.952,5.599 L58.163,505.589h495.67l-62.421-128.242c-1.498-3.08-5.527-5.599-8.953-5.599h-96.108c5.273-6.029,10.591-11.92,15.879-17.735 c5.585-6.144,11.2-12.321,16.695-18.658c1.628-1.878,4.984-3.434,7.47-3.434h80.971 C510.789,331.921,514.817,334.439,516.316,337.52z M444.541,205.228c0,105.776-88.058,125.614-129.472,227.265 c-3.365,8.26-14.994,8.218-18.36-0.04c-37.359-91.651-112.638-116.784-127.041-198.432 c-14.181-80.379,41.471-159.115,122.729-166.796C375.037,59.413,444.541,124.204,444.541,205.228z M379.114,205.228 c0-40.436-32.779-73.216-73.216-73.216s-73.216,32.78-73.216,73.216c0,40.437,32.779,73.216,73.216,73.216 S379.114,245.665,379.114,205.228z\"/></symbol><symbol id=\"share\" viewBox=\"0 0 59 59\"><path d=\"M47,39c-2.671,0-5.182,1.04-7.071,2.929c-0.524,0.524-0.975,1.1-1.365,1.709l-17.28-10.489 C21.741,32.005,22,30.761,22,29.456c0-1.305-0.259-2.549-0.715-3.693l17.284-10.409C40.345,18.142,43.456,20,47,20 c5.514,0,10-4.486,10-10S52.514,0,47,0S37,4.486,37,10c0,1.256,0.243,2.454,0.667,3.562L20.361,23.985 c-1.788-2.724-4.866-4.529-8.361-4.529c-5.514,0-10,4.486-10,10s4.486,10,10,10c3.495,0,6.572-1.805,8.36-4.529L37.664,45.43 C37.234,46.556,37,47.759,37,49c0,2.671,1.04,5.183,2.929,7.071C41.818,57.96,44.329,59,47,59s5.182-1.04,7.071-2.929 C55.96,54.183,57,51.671,57,49s-1.04-5.183-2.929-7.071C52.182,40.04,49.671,39,47,39z\"/></symbol><symbol id=\"sword\" viewBox=\"0 0 512 512\"><path d=\"M512,10.697c0-5.385-4.021-9.926-9.354-10.583c-5.854-0.812-10.354,2.781-11.667,8 c-6.333,25.373-86.917,60.725-142.125,77.714c-4.458,1.385-7.521,5.521-7.521,10.197c0,53.985-108.432,164.502-205.259,246.393 c-4.999-10.014-8.074-21.142-8.074-33.072c0-5.895-4.771-10.666-10.667-10.666H74.667C68.771,298.68,64,303.45,64,309.346 c0,28.086,8.452,54.21,22.865,76.072l-48.66,41.706C16.802,429.391,0,447.335,0,469.336C0,492.866,19.146,512,42.667,512 c21.686,0,39.453-16.324,42.125-37.302l51.168-43.859c19.807,10.919,42.536,17.166,66.707,17.166 c5.896,0,10.667-4.771,10.667-10.666v-42.664c0-5.895-4.771-10.666-10.667-10.666c-2.555,0-4.971-0.503-7.461-0.754 C508.137,199.618,512,18.492,512,10.697z\"/></symbol><symbol id=\"bow\" viewBox=\"0 0 512.00077 512\"><path d=\"m11.625 90.570312c12.742188 12.738282 31.789062 16.644532 48.527344 9.953126l2.753906-1.097657 143.015625 143.011719 21.214844-21.210938-133.503907-133.503906c48.023438-17.691406 99.464844-21.160156 149.410157-9.128906 23.171875 5.585938 41.992187 20.71875 52.941406 42.5625 11.128906 22.203125 12 47.835938 2.878906 70.765625l-139.417969 139.417969-54.84375-18.28125c-5.398437-1.792969-11.332031-.390625-15.355468 3.625l-84.851563 84.855468c-3.675781 3.675782-5.175781 8.992188-3.988281 14.054688 1.160156 4.96875 4.828125 9.09375 9.851562 10.785156l56.527344 18.839844 18.839844 56.523438c1.6875 5.015624 5.808594 8.691406 10.78125 9.851562 5.066406 1.191406 10.378906-.3125 14.058594-3.988281l84.851562-84.851563c4.015625-4.019531 5.417969-9.957031 3.625-15.351562l-18.28125-54.847656 139.417969-139.417969c22.929687-9.121094 48.5625-8.25 70.765625 2.878906 21.84375 10.96875 36.96875 29.757813 42.5625 52.917969 12.03125 49.964844 8.5625 101.410156-9.128906 149.433594l-133.503906-133.5-21.210938 21.210937 143.011719 143.011719-1.109375 2.765625c-6.679688 16.730469-2.773438 35.777343 9.96875 48.519531l7.226562 7.230469c5.863282 5.859375 15.351563 5.859375 21.214844 0 5.863281-5.863281 5.863281-15.351563 0-21.214844l-7.230469-7.230469c-9.054687-9.054687-.449219-25.046875 1.445313-28.089844 3.351562-13.464843 45.007812-78.984374 18.484375-189.160156-7.59375-31.433594-28.816407-57.984375-58.296875-72.710937-15.207032-7.625-31.644532-11.496094-48.175782-12.085938l83.585938-83.585937h36.210938c6.464843 0 12.191406-4.132813 14.230468-10.257813l21.214844-63.636719c3.585938-10.792968-8.183594-22.558593-18.976562-18.976562l-63.636719 21.214844c-6.125 2.039062-10.257813 7.765625-10.257813 14.230468v36.214844l-83.585937 83.585938c-.589844-16.535156-4.457031-32.972656-12.082031-48.179688-14.730469-29.476562-41.277344-50.703125-72.734376-58.296875-58.371093-14.054687-118.6875-9.691406-174.410156 12.597657-3.09375 1.234374-29.734375 11.882812-26.640625 10.648437-5.582031 2.226563-11.933593.929687-16.179687-3.316406l-7.230469-7.226563c-5.863281-5.863281-15.351563-5.863281-21.214844 0-5.859375 5.859375-5.859375 15.347656 0 21.210938zm0 0\"/></symbol><symbol id=\"dart\" viewBox=\"0 0 504.92379 504\"><path d=\"m214.972656 252.402344-2.132812-20.265625-76 76-10.132813 50.398437-32.535156-32.53125-30.132813 30.132813 27.464844 27.464843-91.4648435 90.933594 30.1328125 30.132813 91.199219-91.199219 27.46875 27.46875 30.132812-30.136719-32.535156-32.53125 50.402344-10.132812 76-76-20.265625-2.132813c-19.734375-2.402344-35.203125-17.867187-37.601563-37.601562zm0 0\"/><path d=\"m236.039062 250.003906c0 1.066406.265626 2.132813.535157 3.199219l128.796875-128.800781-11.464844-105.332032c-2.132812-17.066406-23.734375-24.800781-36.265625-12.800781l-90.402344 90.398438c-4.53125 4.535156-6.933593 10.933593-6.132812 17.335937zm0 0\"/><path d=\"m503.773438 165.203125c-2.667969-7.734375-9.601563-13.332031-17.867188-14.132813l-105.332031-11.734374-128.800781 128.800781c1.066406.265625 2.132812.53125 3.199218.53125l135.734375 15.203125h2.398438c5.601562 0 11.199219-2.136719 15.199219-6.136719l90.402343-90.398437c5.867188-5.867188 7.730469-14.398438 5.066407-22.132813zm0 0\"/></symbol><symbol id=\"tent\" viewBox=\"0 0 45.548 45.547\"><path d=\"M0.364,41.487L20.822,8.418l-3.579-5.536c-0.479-0.741-0.267-1.729,0.474-2.208c0.741-0.479,1.731-0.268,2.211,0.475 l2.844,4.403l2.848-4.404c0.479-0.741,1.469-0.953,2.209-0.474c0.741,0.479,0.953,1.468,0.476,2.209l-3.578,5.536l20.457,33.069 c0.461,0.735,0.486,1.656,0.065,2.415c-0.42,0.76-1.22,1.225-2.087,1.225h-9.055c-0.817,0-1.579-0.417-2.021-1.104l-7.693-12.007 c-0.354-0.552-0.964-0.885-1.619-0.885c-0.654,0-1.265,0.333-1.619,0.886l-7.689,12.006c-0.44,0.689-1.202,1.106-2.021,1.106 H2.387c-0.868,0-1.668-0.465-2.088-1.226S-0.097,42.222,0.364,41.487z\"/></symbol><symbol id=\"wall\" viewBox=\"0 0 209.217 209.216\"><polygon points=\"104.605,124.953 54.991,124.953 54.991,84.259 104.605,84.259 154.217,84.259 154.217,124.953 \"/><rect y=\"84.259\" width=\"44.24\" height=\"40.694\"/><rect x=\"164.968\" y=\"84.259\" width=\"44.243\" height=\"40.694\"/><polygon points=\"209.217,73.509 159.593,73.509 109.98,73.509 109.98,22.174 209.217,22.174 \"/><polygon points=\"0,22.174 99.229,22.174 99.229,73.509 49.615,73.509 0,73.509 \"/><polygon points=\"0,135.704 49.615,135.704 99.229,135.704 99.229,187.042 0,187.042 \"/><polygon points=\"209.217,187.042 109.98,187.042 109.98,135.704 159.593,135.704 209.217,135.704 \"/></symbol><symbol id=\"door\" viewBox=\"0 0 492.5 492.5\"><path d=\"M285.048,21.72L164.234,0v21.72H79.292v433.358h31.403V53.123h53.539V492.5l208.15-37.422v-61.235h9.421v61.235h31.403 V21.72H285.048z M202.526,263.129c-6.997,0-12.67-7.381-12.67-16.486c0-9.104,5.673-16.485,12.67-16.485s12.67,7.381,12.67,16.485 C215.196,255.748,209.523,263.129,202.526,263.129z M381.805,344.646h-9.421V142.621h9.421V344.646z M381.805,93.423h-9.421v-40.3 h9.421V93.423z\"/></symbol><symbol id=\"monkey\" viewBox=\"0 0 512 512\"><g> <g> <path d=\"M243.906,106.479c-11.85,4.643-20.267,16.183-20.267,29.659c0,13.476,8.418,25.015,20.267,29.659 c-2.278-9.52-3.493-19.45-3.493-29.659S241.628,115.999,243.906,106.479z\"/> </g> </g><g> <g> <path d=\"M173.623,359.705c-31.268,0-56.708,25.439-56.708,56.708v26.559H102.4c-7.738,0-14.034-6.295-14.034-14.033V190.13 c0-24.362-19.82-44.182-44.182-44.182C19.821,145.948,0,165.768,0,190.13v30.695h30.149V190.13 c0-7.738,6.296-14.033,14.034-14.033c7.737,0,14.033,6.295,14.033,14.033v238.808c0,24.362,19.821,44.182,44.183,44.182h14.515 h12.533h44.175c31.268,0,56.708-25.439,56.708-56.708C230.331,385.142,204.891,359.705,173.623,359.705z\"/> </g> </g><g> <g> <path d=\"M367.819,38.879c-19.002,0-36.745,5.483-51.742,14.943c1.086-0.037,2.173-0.076,3.264-0.076 c17.307,0,33.867,4.584,48.477,13.34c14.612-8.758,31.171-13.34,48.477-13.34c1.091,0,2.178,0.039,3.264,0.076 C404.564,44.362,386.821,38.879,367.819,38.879z\"/> </g> </g><g> <g> <path d=\"M367.821,263.544c-47.763,0-89.462-26.421-111.272-65.41h-1.062h-37.918c-55.501,0-100.653,45.153-100.653,100.652v51.889 c15.227-13.154,35.054-21.119,56.708-21.119c47.893,0,86.857,38.964,86.857,86.857c0,21.653-7.966,41.481-21.119,56.708h36.584 v-170.19h30.149v170.19h36.647V356.885h30.149V473.12h36.647V256.522C396.46,261.067,382.425,263.544,367.821,263.544z\"/> </g> </g><g> <g> <path d=\"M491.733,106.479c2.278,9.52,3.493,19.45,3.493,29.659s-1.215,20.138-3.493,29.659 C503.582,161.153,512,149.613,512,136.137C512,122.662,503.582,111.122,491.733,106.479z\"/> </g> </g><g> <g> <path d=\"M457.661,98.903c-11.597-9.699-26.167-15.008-41.364-15.008c-14.342,0-27.928,4.617-39.29,13.352l-9.188,7.063 l-9.188-7.064c-11.361-8.734-24.946-13.351-39.289-13.351c-15.196,0-29.767,5.308-41.366,15.008 c-4.774,11.475-7.415,24.051-7.415,37.234c0,53.628,43.63,97.257,97.257,97.257c53.628,0,97.258-43.63,97.258-97.257 C465.075,122.953,462.434,110.377,457.661,98.903z M328.415,161.924c-8.325,0-15.074-6.749-15.074-15.074 s6.749-15.074,15.074-15.074c8.325,0,15.074,6.749,15.074,15.074S336.741,161.924,328.415,161.924z M407.222,161.924 c-8.325,0-15.074-6.749-15.074-15.074s6.749-15.074,15.074-15.074s15.074,6.749,15.074,15.074S415.549,161.924,407.222,161.924z\"/> </g> </g></symbol><symbol id=\"settings\" viewBox=\"0 0 54 54\"><path d=\"M51.22,21h-5.052c-0.812,0-1.481-0.447-1.792-1.197s-0.153-1.54,0.42-2.114l3.572-3.571 c0.525-0.525,0.814-1.224,0.814-1.966c0-0.743-0.289-1.441-0.814-1.967l-4.553-4.553c-1.05-1.05-2.881-1.052-3.933,0l-3.571,3.571 c-0.475,0.475-0.997,0.574-1.352,0.574c-0.5,0-0.997-0.196-1.364-0.539C33.324,8.984,33,8.534,33,7.832V2.78 C33,1.247,31.753,0,30.22,0H23.78C22.247,0,21,1.247,21,2.78v5.052c0,1.218-0.997,1.945-1.961,1.945c-0.354,0-0.876-0.1-1.351-0.574 l-3.571-3.571c-1.052-1.052-2.883-1.05-3.933,0l-4.553,4.553c-0.525,0.525-0.814,1.224-0.814,1.967c0,0.742,0.289,1.44,0.814,1.966 l3.572,3.571c0.573,0.574,0.73,1.364,0.42,2.114S8.644,21,7.832,21H2.78C1.247,21,0,22.247,0,23.78v6.438C0,31.752,1.247,33,2.78,33 h5.052c0.812,0,1.481,0.447,1.792,1.197s0.153,1.54-0.42,2.114l-3.572,3.571c-0.525,0.525-0.814,1.224-0.814,1.966 c0,0.743,0.289,1.441,0.814,1.967l4.553,4.553c1.051,1.051,2.881,1.053,3.933,0l3.571-3.571c0.475-0.475,0.997-0.574,1.352-0.574 c0.963,0,1.96,0.728,1.96,1.945v5.051C21,52.752,22.247,54,23.78,54h6.439c1.533,0,2.78-1.248,2.78-2.781v-5.051 c0-1.218,0.997-1.945,1.96-1.945c0.354,0,0.877,0.1,1.352,0.574l3.571,3.571c1.052,1.052,2.883,1.05,3.933,0l4.553-4.553 c0.525-0.525,0.814-1.224,0.814-1.967c0-0.742-0.289-1.44-0.814-1.966l-3.572-3.571c-0.573-0.574-0.73-1.364-0.42-2.114 S45.356,33,46.168,33h5.052c1.533,0,2.78-1.248,2.78-2.781V23.78C54,22.247,52.753,21,51.22,21z M34,27c0,3.859-3.141,7-7,7 s-7-3.141-7-7s3.141-7,7-7S34,23.141,34,27z\"/></symbol><symbol id=\"trophy\" viewBox=\"0 0 512.00001 512\"><path d=\"M 497 36.953125 L 431.296875 36.953125 C 431.535156 29.675781 431.667969 22.355469 431.667969 15 C 431.667969 6.714844 424.949219 0 416.667969 0 L 95.335938 0 C 87.050781 0 80.335938 6.714844 80.335938 15 C 80.335938 22.355469 80.464844 29.675781 80.703125 36.953125 L 15 36.953125 C 6.714844 36.953125 0 43.667969 0 51.953125 C 0 119.164062 17.566406 182.574219 49.460938 230.507812 C 80.988281 277.894531 122.984375 305.074219 168.347656 307.71875 C 178.632812 318.910156 189.507812 328.035156 200.832031 334.996094 L 200.832031 401.664062 L 175.667969 401.664062 C 145.246094 401.664062 120.5 426.414062 120.5 456.832031 L 120.5 481.996094 L 119.433594 481.996094 C 111.148438 481.996094 104.433594 488.714844 104.433594 496.996094 C 104.433594 505.28125 111.148438 511.996094 119.433594 511.996094 L 392.566406 511.996094 C 400.851562 511.996094 407.566406 505.28125 407.566406 496.996094 C 407.566406 488.714844 400.851562 481.996094 392.566406 481.996094 L 391.5 481.996094 L 391.5 456.832031 C 391.5 426.414062 366.75 401.664062 336.332031 401.664062 L 311.167969 401.664062 L 311.167969 334.996094 C 322.492188 328.035156 333.363281 318.910156 343.648438 307.71875 C 389.015625 305.074219 431.007812 277.894531 462.539062 230.507812 C 494.433594 182.574219 512 119.164062 512 51.953125 C 512 43.667969 505.28125 36.953125 497 36.953125 Z M 74.4375 213.890625 C 48.128906 174.351562 32.671875 122.644531 30.316406 66.953125 L 82.378906 66.953125 C 87.789062 135.414062 103.859375 198.691406 128.976562 248.925781 C 132.976562 256.925781 137.160156 264.480469 141.5 271.601562 C 116.550781 262.179688 93.460938 242.484375 74.4375 213.890625 Z M 437.5625 213.890625 C 418.539062 242.484375 395.449219 262.179688 370.5 271.601562 C 374.84375 264.480469 379.023438 256.925781 383.023438 248.925781 C 408.140625 198.691406 424.207031 135.414062 429.621094 66.953125 L 481.683594 66.953125 C 479.328125 122.644531 463.871094 174.351562 437.5625 213.890625 Z M 437.5625 213.890625 \" style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\"/></symbol><symbol id=\"leaf\" viewBox=\"0 0 551.391 551.391\"><path d=\"M413.695,0c0,0-45.366,44.014-94.43,61.759C-44.068,193.178,109.165,449.277,114.164,450.121 c0,0,20.374-35.48,47.896-55.717c174.644-128.389,210.14-276.171,210.14-276.171s-39.19,177.829-194.562,288.479 c-34.316,24.426-57.552,84.568-67.388,144.679c0,0,24.325-9.828,34.785-12.49c4.079-26.618,12.607-52.106,27.025-74.875 c217.151,25.854,288.272-149.123,297.563-210.136C491.552,109.79,413.695,0,413.695,0z\"/></symbol><symbol id=\"nunchaku\" viewBox=\"0 0 512 512.0005\"><path d=\"m307.203125 35.089844-29 29c-16.699219-7.894532-37.078125-5.347656-50.890625 8.464844l-31.820312 31.820312 63.640624 63.640625 31.816407-31.820313c13.8125-13.8125 16.363281-34.191406 8.464843-50.890624l29-29c35.097657-35.09375 92.1875-35.09375 127.28125 0 35.09375 35.089843 35.09375 92.183593 0 127.277343l-29 29c-16.699218-7.894531-37.082031-5.34375-50.890624 8.464844l-31.820313 31.820313 63.640625 63.640624 31.820312-31.820312c13.808594-13.8125 16.359376-34.191406 8.464844-50.890625l29-29c46.785156-46.789063 46.785156-122.921875 0-169.707031-46.789062-46.785156-122.917968-46.785156-169.707031 0zm0 0\"/><path d=\"m153.0625 146.800781 21.214844-21.210937 63.636718 63.640625-21.210937 21.210937zm0 0\"/><path d=\"m76.820312 350.328125 118.671876-118.671875-63.636719-63.640625-118.675781 118.671875c-17.574219 17.574219-17.574219 46.066406 0 63.640625 17.574218 17.574219 46.066406 17.574219 63.640624 0zm0 0\"/><path d=\"m301.554688 295.300781 21.214843-21.210937 63.636719 63.636718-21.210938 21.214844zm0 0\"/><path d=\"m161.675781 435.179688c-17.574219 17.574218-17.574219 46.066406 0 63.640624 17.570313 17.574219 46.0625 17.574219 63.636719 0l118.671875-118.671874-63.636719-63.640626zm0 0\"/></symbol></svg>";

	var Links = { 
	    view: function view(){ 
	        return [
	            v("link", {"rel":"shortcut icon","href":"/icons/favicon.ico"}),
	            v("link", {"rel":"icon","type":"image/png","sizes":"16x16","href":"/icons/favicon-16x16.png"}),
	            v("link", {"rel":"icon","type":"image/png","sizes":"32x32","href":"/icons/favicon-32x32.png"}),
	            v("link", {"rel":"manifest","href":"/icons/manifest.json"}),
	            v("meta", {"name":"mobile-web-app-capable","content":"yes"}),
	            v("meta", {"name":"theme-color","content":"#4CAF50"}),
	            v("meta", {"name":"application-name","content":"MonkeyTown.io"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"57x57","href":"/icons/apple-touch-icon-57x57.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"60x60","href":"/icons/apple-touch-icon-60x60.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"72x72","href":"/icons/apple-touch-icon-72x72.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"76x76","href":"/icons/apple-touch-icon-76x76.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"114x114","href":"/icons/apple-touch-icon-114x114.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"120x120","href":"/icons/apple-touch-icon-120x120.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"144x144","href":"/icons/apple-touch-icon-144x144.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"152x152","href":"/icons/apple-touch-icon-152x152.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"180x180","href":"/icons/apple-touch-icon-180x180.png"}),
	            v("meta", {"name":"apple-mobile-web-app-capable","content":"yes"}),
	            v("meta", {"name":"apple-mobile-web-app-status-bar-style","content":"black-translucent"}),
	            v("meta", {"name":"apple-mobile-web-app-title","content":"MonkeyTown.io"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 320px) and (device-height: 480px) and (-webkit-device-pixel-ratio: 1)","href":"/icons/apple-touch-startup-image-320x460.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 320px) and (device-height: 480px) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-640x920.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-640x1096.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-750x1294.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 414px) and (device-height: 736px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 3)","href":"/icons/apple-touch-startup-image-1182x2208.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 414px) and (device-height: 736px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 3)","href":"/icons/apple-touch-startup-image-1242x2148.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 1)","href":"/icons/apple-touch-startup-image-748x1024.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 1)","href":"/icons/apple-touch-startup-image-768x1004.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-1496x2048.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-1536x2008.png"}),
	            v("meta", {"name":"msapplication-TileColor","content":"#4CAF50"}),
	            v("meta", {"name":"msapplication-TileImage","content":"/icons/mstile-144x144.png"}),
	            v("meta", {"name":"msapplication-config","content":"/icons/browserconfig.xml"})
	        ];
	    }
	};

	var Main = {
	    title: displayName,
	    version: version,
	    description: description,
	    id: version, // change this to version when publish
	    view: function view() {
	        var children = [], len = arguments.length;
	        while ( len-- ) children[ len ] = arguments[ len ];

	        var view = v( 'html', { lang: "en" },
	            v( 'head', null,
	                v( 'title', null, Main.title ),
	                v( 'meta', { charset: "utf-8" }),
	                v( 'meta', { name: "description", content: Main.description }),
	                v( 'meta', { 'http-equiv': "x-UA-Compatible", content: "IE=edge" }),
	                v( 'meta', { name: "viewport", content: "width=device-width, initial-scale=1, maximum-scale=5, minimal-ui" }),
	                v( 'link', { href: ("/css/main.css?v=" + (Main.id)), rel: "stylesheet" }),
	                v( Links, null ),
	                v( 'script', { async: true, src: "https://www.googletagmanager.com/gtag/js?id=UA-130237454-1" }),
	                v( 'script', null,
	                    v.trust("\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'UA-130237454-1');  \n                    ")
	                )
	            ),
	            v( 'body', null,
	                v( 'div', { id: "hidden-icons" }, v.trust(icons)),
	                v( 'div', { id: "ui" },
	                    children,
	                    v( 'script', { src: ("/js/socket.io.js?v=" + (Main.id)) }),
	                    v( 'script', { src: ("/js/three.min.js?v=" + (Main.id)) }),
	                    v( 'script', { src: ("/js/CSS2DRenderer.js?v=" + (Main.id)) }),
	                    v( 'script', { src: ("/js/index.min.js?v=" + (Main.id)) })
	                )
	            )
	        );

	        return view;
	    }
	};

	var Panel = v(function (props) {
	    var children = [], len = arguments.length - 1;
	    while ( len-- > 0 ) children[ len ] = arguments[ len + 1 ];

	    return v( 'section', { 'data-panel': props.position, 'data-background': props.color, 'data-border': props.border },
	        v( 'nav', null, props.title ),
	        v( 'div', null, children )
	    );
	});

	var Icon = v(function (props) {
	    return v( 'svg', { class: ("icon " + (props.size || '')), 'data-color': props.color },
	        v( 'use', { href: ("#" + (props.icon)) })
	    );
	});

	var config = {

	};

	var AppFactory = function (Game) {
	    Game.app = {};

	    Game.app.scene = new THREE.Scene();
	    Game.app.scene.background = new THREE.Color(0xf2f7ff);
	    // Game.app.scene.fog = new THREE.Fog(0xf2f7ff, 1, 200);

	    Game.app.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);
	    Game.app.camera.position.set(0, 15, 12);
	    Game.app.camera.lookAt(new THREE.Vector3(0, 0, 0));
	    Game.app.scene.add(Game.app.camera);

	    Game.app.mixer = new THREE.AnimationMixer(Game.app.scene);
	    Game.app.listener = new THREE.AudioListener();
	    var AudioLoader = new THREE.AudioLoader();
	    AudioLoader.load(Game.url + '/sound/mushroom-dance.ogg', function (buffer) {
	        Game.audio.ambient = new THREE.Audio(Game.app.listener);
	        Game.audio.ambient.setBuffer(buffer);
	        Game.audio.ambient.setLoop(true);
	        Game.audio.ambient.setVolume(0.3);
	        Game.audio.ambient.play();
	    });
	    AudioLoader.load(Game.url + '/sound/menu-rollover.ogg', function (buffer) { return Game.audio.fight = buffer; });
	    // Game.app.camera.add(Game.app.listener);

	    Game.app.renderer = new THREE.WebGLRenderer({ antialias: true });
	    Game.app.renderer.setPixelRatio(window.devicePixelRatio);
	    Game.app.renderer.setSize(window.innerWidth, window.innerHeight);
	    Game.app.renderer.shadowMap.enabled = true;
	    Game.app.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
	    Game.canvas = Game.app.renderer.domElement;

	    document.body.appendChild(Game.canvas);
	    Game.canvas.setAttribute('tabindex', '0');
	    Game.canvas.setAttribute('id', 'game-canvas');

	    Game.app.css2drenderer = new THREE.CSS2DRenderer();
	    Game.app.css2drenderer.setSize(window.innerWidth, window.innerHeight);
	    Game.css2d = Game.app.css2drenderer.domElement;
	    document.body.appendChild(Game.css2d);
	    Game.css2d.setAttribute('tabindex', '0');
	    Game.css2d.setAttribute('id', 'game-css2d');

	    window.addEventListener('resize', function () {
	        Game.app.camera.aspect = window.innerWidth / window.innerHeight;
	        Game.app.camera.updateProjectionMatrix();
	        Game.app.renderer.setSize(window.innerWidth, window.innerHeight);
	        Game.app.css2drenderer.setSize(window.innerWidth, window.innerHeight);
	    });


	    Game.app.light = new THREE.DirectionalLight(0xffffff, 0.9);
	    Game.app.light.position.set(30, 60, 50);
	    Game.app.light.position.multiplyScalar(2);

	    Game.app.light.shadow.camera.left = -162;
	    Game.app.light.shadow.camera.right = 162;
	    Game.app.light.shadow.camera.top = 162;
	    Game.app.light.shadow.camera.bottom = -162;
	    Game.app.light.shadow.mapSize.width = 2048;
	    Game.app.light.shadow.mapSize.height = 2048;

	    Game.app.light.castShadow = true;
	    Game.app.scene.add(Game.app.light);

	    Game.app.ambientlight = new THREE.AmbientLight(0x999999);
	    Game.app.scene.add(Game.app.ambientlight);

	    Game.app.hemiLight = new THREE.HemisphereLight(0xffffff, 0x00ff00, 0.6);
	    Game.app.scene.add(Game.app.hemiLight);

	    var textureLoader = new THREE.TextureLoader();
	    var groundtexture = textureLoader.load("imgs/grass.gif");
	    var groundmaterial = new THREE.MeshPhongMaterial({
	        color: 0x999999,
	        map: groundtexture
	    });
	    groundtexture.anisotropy = 1;
	    groundtexture.wrapS = groundtexture.wrapT = THREE.RepeatWrapping;
	    groundtexture.repeat.set(512, 512);
	    Game.app.ground = new THREE.Mesh(
	        new THREE.PlaneBufferGeometry(300, 300),
	        groundmaterial
	    );
	    Game.app.ground.rotation.x = -(Math.PI / 2);
	    Game.app.ground.castShadow = false;
	    Game.app.ground.receiveShadow = true;
	    Game.app.ground.position.set(0, -1, 0);
	    Game.app.ground.scale.set(15, 15, 15);
	    Game.app.scene.add(Game.app.ground);

	    var limits = new THREE.Mesh(
	        new THREE.RingBufferGeometry(145, 150, 4),
	        new THREE.MeshStandardMaterial({ color: 0xffffff, side: THREE.DoubleSide })
	    );
	    limits.position.set(0, 0.8, 0);
	    limits.castShadow = true;
	    limits.receiveShadow = true;
	    limits.rotation.x = -Math.PI / 2;
	    limits.rotation.z = -Math.PI / 4;
	    Game.app.scene.add(limits);
	};

	var ConnectionFactory = function (Game) {
	    var Connection = {
	        initSocket: function initSocket(url) {
	            if (Game.socket !== undefined) {
	                Game.socket.disconnect();
	                Game.socket = undefined;
	            }

	            Game.socket = io(url);

	            /**
	             * As we will destroy the player when socket disconnects
	             * with this we will reload the browser page if the user recconnects
	             */
	            Game.socket.on('reconnect', function () { return window.location.href = window.location.href; });

	            // Custom game events
	            Game.socket.on('world', function (data) { return Game.updateWorld(data); });
	        },
	        connectServer: function connectServer(name, world) {
	            if ( world === void 0 ) world = 'Alpha';

	            return new Promise(function (resolve) {
	                Game.socket.emit('connectServer', name, world, function (err, entity) {
	                    if (err) {
	                        console.error(err);
	                        return;
	                    }
	                    entity.socket = Game.socket;
	                    resolve(entity);
	                });
	            });
	        },
	        getWorlds: function () { return new Promise(function (resolve) { return Game.socket.emit('getWorlds', resolve); }); }
	    };
	    return Connection;
	};

	var KeyboardScriptFactory = function (Game) {
	    var raycaster = new THREE.Raycaster();
	    var mouse = new THREE.Vector2();
	    var intersects;

	    Game.keyboard.onChange(function (type, data) {
	        if (Game.player) {
	            if (Game.keyboard.target === Game.canvas || Game.keyboard.target === Game.css2d) {
	                if (type === 'mousemove') {
	                    if (mouse.x !== data.x || mouse.y !== data.y) {
	                        mouse.x = data.x;
	                        mouse.y = data.y;
	                        raycaster.setFromCamera(mouse, Game.app.camera);
	                        intersects = raycaster.intersectObjects([Game.app.ground]);
	                        if (intersects.length === 1) {
	                            var p = {
	                                x: intersects[0].point.x,
	                                y: intersects[0].point.y,
	                                z: intersects[0].point.z
	                            };
	                            Game.player.socket.emit('keyboard', type, Game.fixedProps(p));
	                        }
	                    }
	                    return;
	                }

	                Game.player.socket.emit('keyboard', type, data);
	            }

	            if (type === 'mouseup' || type === 'keyup') {
	                Game.player.socket.emit('keyboard', type, data);
	            }
	        }
	    });
	};

	var TinyAnimate = createCommonjsModule(function (module, exports) {
	/**
	 * TinyAnimate
	 *  version 0.3.0
	 *
	 * Source:  https://github.com/branneman/TinyAnimate
	 * Author:  Bran van der Meer <branmovic@gmail.com> (http://bran.name/)
	 * License: MIT
	 *
	 * Functions:
	 *  TinyAnimate.animate(from, to, duration, update, easing, done)
	 *  TinyAnimate.animateCSS(element, property, unit, from, to, duration, easing, done)
	 *  TinyAnimate.cancel(animation)
	 *
	 * Parameters:
	 *  element   HTMLElement        A dom node
	 *  property  string             Property name, as available in element.style, i.e. 'borderRadius', not 'border-radius'
	 *  unit      string             Property unit, like 'px'
	 *  from      int                Property value to animate from
	 *  to        int                Property value to animate to
	 *  duration  int                Duration in milliseconds
	 *  update    function           Function to implement updating the DOM, get's called with a value between `from` and `to`
	 *  easing    string | function  Optional: A string when the easing function is available in TinyAnimate.easings,
	 *                                or a function with the signature: function(t, b, c, d) {...}
	 *  done      function           Optional: To be executed when the animation has completed.
	 *
	 * Returns:
	 *  animation object             Animation object that can be canceled.
	 */

	/**
	 * Universal Module Dance
	 *  config: CommonJS Strict, exports Global, supports circular dependencies
	 *  https://github.com/umdjs/umd/
	 */
	(function(root, factory) {
	    {
	        factory(exports);
	    }
	}(commonjsGlobal, function(exports) {

	    /**
	     * TinyAnimate.animate()
	     */
	    exports.animate = function(from, to, duration, update, easing, done) {

	        // Early bail out if called incorrectly
	        if (typeof from !== 'number' ||
	            typeof to !== 'number' ||
	            typeof duration !== 'number' ||
	            typeof update !== 'function')
	            { return; }

	        // Determine easing
	        if (typeof easing === 'string' && easings[easing]) {
	            easing = easings[easing];
	        }
	        if (typeof easing !== 'function') {
	            easing = easings.linear;
	        }

	        // Create mock done() function if necessary
	        if (typeof done !== 'function') {
	            done = function() {};
	        }

	        // Pick implementation (requestAnimationFrame | setTimeout)
	        var rAF = window.requestAnimationFrame || function(callback) {
	            window.setTimeout(callback, 1000 / 60);
	        };

	        // Animation loop
	        var canceled = false;
	        var change = to - from;
	        function loop(timestamp) {
	            if (canceled) {
	                return;
	            }
	            var time = (timestamp || +new Date()) - start;
	            if (time >= 0) {
	                update(easing(time, from, change, duration));
	            }
	            if (time >= 0 && time >= duration) {
	                update(to);
	                done();
	            } else {
	                rAF(loop);
	            }
	        }
	        update(from);

	        // Start animation loop
	        var start = window.performance && window.performance.now ? window.performance.now() : +new Date();

	        rAF(loop);

	        return {
	            cancel: function() {
	                canceled = true;
	            }
	        };
	    };

	    /**
	     * TinyAnimate.animateCSS()
	     *  Shortcut method for animating css properties
	     */
	    exports.animateCSS = function(element, property, unit, from, to, duration, easing, done) {

	        var update = function(value) {
	            element.style[property] = value + unit;
	        };
	        return exports.animate(from, to, duration, update, easing, done);
	    };

	    /**
	     * TinyAnimate.cancel()
	     *  Method for canceling animations
	     */
	    exports.cancel = function(animation) {
	        if (!animation) {
	            return;
	        }
	        animation.cancel();
	    };

	    /**
	     * TinyAnimate.easings
	     *  Adapted from jQuery Easing
	     */
	    var easings = exports.easings = {};
	    easings.linear = function(t, b, c, d) {
	        return c * t / d + b;
	    };
	    easings.easeInQuad = function(t, b, c, d) {
	        return c * (t /= d) * t + b;
	    };
	    easings.easeOutQuad = function(t, b, c, d) {
	        return -c * (t /= d) * (t - 2) + b;
	    };
	    easings.easeInOutQuad = function(t, b, c, d) {
	        if ((t /= d / 2) < 1) { return c / 2 * t * t + b; }
	        return -c / 2 * ((--t) * (t - 2) - 1) + b;
	    };
	    easings.easeInCubic = function(t, b, c, d) {
	        return c * (t /= d) * t * t + b;
	    };
	    easings.easeOutCubic = function(t, b, c, d) {
	        return c * ((t = t / d - 1) * t * t + 1) + b;
	    };
	    easings.easeInOutCubic = function(t, b, c, d) {
	        if ((t /= d / 2) < 1) { return c / 2 * t * t * t + b; }
	        return c / 2 * ((t -= 2) * t * t + 2) + b;
	    };
	    easings.easeInQuart = function(t, b, c, d) {
	        return c * (t /= d) * t * t * t + b;
	    };
	    easings.easeOutQuart = function(t, b, c, d) {
	        return -c * ((t = t / d - 1) * t * t * t - 1) + b;
	    };
	    easings.easeInOutQuart = function(t, b, c, d) {
	        if ((t /= d / 2) < 1) { return c / 2 * t * t * t * t + b; }
	        return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
	    };
	    easings.easeInQuint = function(t, b, c, d) {
	        return c * (t /= d) * t * t * t * t + b;
	    };
	    easings.easeOutQuint = function(t, b, c, d) {
	        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
	    };
	    easings.easeInOutQuint = function(t, b, c, d) {
	        if ((t /= d / 2) < 1) { return c / 2 * t * t * t * t * t + b; }
	        return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
	    };
	    easings.easeInSine = function(t, b, c, d) {
	        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
	    };
	    easings.easeOutSine = function(t, b, c, d) {
	        return c * Math.sin(t / d * (Math.PI / 2)) + b;
	    };
	    easings.easeInOutSine = function(t, b, c, d) {
	        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
	    };
	    easings.easeInExpo = function(t, b, c, d) {
	        return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
	    };
	    easings.easeOutExpo = function(t, b, c, d) {
	        return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
	    };
	    easings.easeInOutExpo = function(t, b, c, d) {
	        if (t == 0) { return b; }
	        if (t == d) { return b + c; }
	        if ((t /= d / 2) < 1) { return c / 2 * Math.pow(2, 10 * (t - 1)) + b; }
	        return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
	    };
	    easings.easeInCirc = function(t, b, c, d) {
	        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
	    };
	    easings.easeOutCirc = function(t, b, c, d) {
	        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
	    };
	    easings.easeInOutCirc = function(t, b, c, d) {
	        if ((t /= d / 2) < 1) { return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b; }
	        return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
	    };
	    easings.easeInElastic = function(t, b, c, d) {
	        var p = 0;
	        var a = c;
	        if (t == 0) { return b; }
	        if ((t /= d) == 1) { return b + c; }
	        if (!p) { p = d * .3; }
	        if (a < Math.abs(c)) {
	            a = c;
	            var s = p / 4;
	        }
	        else { var s = p / (2 * Math.PI) * Math.asin(c / a); }
	        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
	    };
	    easings.easeOutElastic = function(t, b, c, d) {
	        var p = 0;
	        var a = c;
	        if (t == 0) { return b; }
	        if ((t /= d) == 1) { return b + c; }
	        if (!p) { p = d * .3; }
	        if (a < Math.abs(c)) {
	            a = c;
	            var s = p / 4;
	        }
	        else { var s = p / (2 * Math.PI) * Math.asin(c / a); }
	        return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
	    };
	    easings.easeInOutElastic = function(t, b, c, d) {
	        var p = 0;
	        var a = c;
	        if (t == 0) { return b; }
	        if ((t /= d / 2) == 2) { return b + c; }
	        if (!p) { p = d * (.3 * 1.5); }
	        if (a < Math.abs(c)) {
	            a = c;
	            var s = p / 4;
	        }
	        else { var s = p / (2 * Math.PI) * Math.asin(c / a); }
	        if (t < 1) { return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b; }
	        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
	    };
	    easings.easeInBack = function(t, b, c, d, s) {
	        if (s == undefined) { s = 1.70158; }
	        return c * (t /= d) * t * ((s + 1) * t - s) + b;
	    };
	    easings.easeOutBack = function(t, b, c, d, s) {
	        if (s == undefined) { s = 1.70158; }
	        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
	    };
	    easings.easeInOutBack = function(t, b, c, d, s) {
	        if (s == undefined) { s = 1.70158; }
	        if ((t /= d / 2) < 1) { return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b; }
	        return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
	    };
	    easings.easeInBounce = function(t, b, c, d) {
	        return c - easings.easeOutBounce(d - t, 0, c, d) + b;
	    };
	    easings.easeOutBounce = function(t, b, c, d) {
	        if ((t /= d) < (1 / 2.75)) {
	            return c * (7.5625 * t * t) + b;
	        } else if (t < (2 / 2.75)) {
	            return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
	        } else if (t < (2.5 / 2.75)) {
	            return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
	        } else {
	            return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
	        }
	    };
	    easings.easeInOutBounce = function(t, b, c, d) {
	        if (t < d / 2) { return easings.easeInBounce(t * 2, 0, c, d) * .5 + b; }
	        return easings.easeOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b;
	    };

	}));
	});

	var Factory = function () {
	    var PROPS = config$1.PROPS;
	    var INVENTORY = config$1.INVENTORY;
	    var STATUS = config$1.STATUS;
	    return {
	        Model: 'Monkey',
	        initServer: function initServer(entity) {

	        },
	        initClient: function initClient(entity, Entities) {
	            var Game = Entities.Game;
	            var audio = new THREE.PositionalAudio(Game.app.listener);
	            audio.setBuffer(Game.audio.fight);
	            audio.setRefDistance(5);
	            audio.setVolume(0.9);

	            entity.body.add(audio);
	            var Model = entity.body.getObjectByName('Model');
	            var Fighting = {
	                animating: false,
	                animate: function animate() {
	                    if (!Fighting.animating) {
	                        Fighting.animating = true;
	                        audio.play();
	                        TinyAnimate.animate(0, Math.PI / 2, 100, Fighting.update, 'easeIn', function () {
	                            TinyAnimate.animate(Math.PI / 2, 0, 400, Fighting.update, 'easeOut', function () {
	                                Fighting.animating = false;
	                            });
	                        });
	                    }
	                },
	                update: function update(rad) {
	                    Model.rotation.y = rad;
	                }
	            };

	            var itemLevels = {
	                0: '',
	                1: 'Stone',
	                2: 'Iron',
	                3: 'Silver',
	                4: 'Gold'
	            };
	            entity.getItem = function (index) {
	                var id = Object.keys(INVENTORY)[index];
	                var item = INVENTORY[id];
	                if (item) {
	                    var level = entity[PROPS.Inventory][id];
	                    var response = Object.assign({}, item);
	                    response.level = level;
	                    response.damage = item.damage * level;
	                    response.collect = item.collect * level;
	                    response.range = level === 0 ? 0 : item.range;
	                    response.fullName = "" + (itemLevels[level]) + (item.name);
	                    return response;
	                }
	            };

	            var prevItem;
	            entity.every(100, function () {
	                if (!prevItem) {
	                    prevItem = entity.getItem(entity[PROPS.Equiped]);
	                }

	                var newItem = entity.getItem(entity[PROPS.Equiped]);

	                if (newItem && newItem.fullName !== prevItem.fullName) {

	                    if (prevItem) {
	                        var model = Model.getObjectByName(prevItem.fullName);
	                        if (model) {
	                            Model.remove(model);
	                        }
	                    }

	                    if (newItem && Game.models[newItem.fullName]) {
	                        var model$1 = Game.models[newItem.fullName].clone();
	                        model$1.name = newItem.fullName;
	                        Model.add(model$1);
	                    }

	                    prevItem = newItem;
	                }
	            });

	            var lifeBar = Game.cssModels.BarFactory('danger');
	            lifeBar.name = 'life';
	            Game.app.scene.add(lifeBar);
	            entity.addScript('destroy', function () { return Game.app.scene.remove(lifeBar); });
	            entity.every(400, function () {
	                var percent = entity[PROPS.Life] / entity[PROPS.MaxLife] * 100;
	                lifeBar.element.firstChild.style.width = percent + "%";
	            });
	            entity.lifeBar = lifeBar;

	            var name = entity.name;
	            var label = Game.cssModels.LabelFactory(name);
	            label.name = 'label';
	            Game.app.scene.add(label);
	            entity.addScript('destroy', function () { return Game.app.scene.remove(label); });
	            entity.every(1000, function () {
	                if (entity.name && entity.name !== name) {
	                    name = entity.name;
	                    label.element.innerText = name;
	                }
	            });

	            entity.addScript('tick', function (dt) {
	                lifeBar.position.copy(entity.body.position);
	                lifeBar.position.z -= 1.3;
	                label.position.copy(entity.body.position);
	                label.position.z -= 1.8;
	                if (entity[PROPS.Status] === STATUS.Fighting) {
	                    Fighting.animate();
	                }
	            });
	        }
	    };
	};

	var playerEntityFactory = Factory;

	var Factory$1 = function () {
	    return {
	        Model: 'Tree',
	        initServer: function initServer(entity) {
	            var Config = config$1;
	            entity.addScript('fight', function () {
	                entity[Config.PROPS.Status] = Config.STATUS.Fighting;
	                setTimeout(function () { return entity[Config.PROPS.Status] = Config.STATUS.Static; }, 400);
	            });
	        },
	        initClient: function initClient(entity) {
	            var Config = config$1;
	            var TreeModel = entity.body.getObjectByName('Model');
	            var Model = TreeModel.getObjectByName('top');
	            var Fighting = {
	                animating: false,
	                animate: function animate() {
	                    if (!Fighting.animating) {
	                        Fighting.animating = true;
	                        TinyAnimate.animate(0, -0.5, 100, Fighting.update, 'easeIn', function () {
	                            TinyAnimate.animate(-0.5, 0, 400, Fighting.update, 'easeOut', function () {
	                                Fighting.animating = false;
	                            });
	                        });
	                    }
	                },
	                update: function update(pos) {
	                    Model.position.z = pos;
	                }
	            };

	            entity.addScript('tick', function (dt) {
	                if (entity[Config.PROPS.Status] === Config.STATUS.Fighting) {
	                    Fighting.animate();
	                }
	            });
	        }
	    };
	};

	var treeEntityFactory = Factory$1;

	var Factory$2 = function (Type) {
	    if ( Type === void 0 ) Type = 'Stone';

	    return function () {

	    return {
	        Model: Type,
	        initServer: function initServer(entity) {
	            var Config = config$1;
	            entity.addScript('fight', function () {
	                entity[Config.PROPS.Status] = Config.STATUS.Fighting;
	                setTimeout(function () { return entity[Config.PROPS.Status] = Config.STATUS.Static; }, 400);
	            });
	        },
	        initClient: function initClient(entity) {
	            var Config = config$1;
	            var Model = entity.body.getObjectByName('Model');
	            var Fighting = {
	                animating: false,
	                animate: function animate() {
	                    if (!Fighting.animating) {
	                        Fighting.animating = true;
	                        TinyAnimate.animate(0, -0.5, 100, Fighting.update, 'easeIn', function () {
	                            TinyAnimate.animate(-0.5, 0, 400, Fighting.update, 'easeOut', function () {
	                                Fighting.animating = false;
	                            });
	                        });
	                    }
	                },
	                update: function update(pos) {
	                    Model.position.z = pos;
	                }
	            };

	            entity.addScript('tick', function (dt) {
	                if (entity[Config.PROPS.Status] === Config.STATUS.Fighting) {
	                    Fighting.animate();
	                }
	            });
	        }
	    };
	};
	};

	var rockEntityFactory = Factory$2;

	var Factory$3 = function () {
	    return {
	        Model: 'Bush',
	        initServer: function initServer(entity) {
	            var Config = config$1;
	            entity.addScript('fight', function () {
	                entity[Config.PROPS.Status] = Config.STATUS.Fighting;
	                setTimeout(function () { return entity[Config.PROPS.Status] = Config.STATUS.Static; }, 400);
	            });
	        },
	        initClient: function initClient(entity) {
	            var Config = config$1;
	            var Model = entity.body.getObjectByName('Model');
	            var Fighting = {
	                animating: false,
	                animate: function animate() {
	                    if (!Fighting.animating) {
	                        Fighting.animating = true;
	                        TinyAnimate.animate(0, -0.3, 100, Fighting.update, 'easeIn', function () {
	                            TinyAnimate.animate(-0.3, 0, 400, Fighting.update, 'easeOut', function () {
	                                Fighting.animating = false;
	                            });
	                        });
	                    }
	                },
	                update: function update(pos) {
	                    Model.position.z = pos;
	                }
	            };

	            entity.addScript('tick', function (dt) {
	                if (entity[Config.PROPS.Status] === Config.STATUS.Fighting) {
	                    Fighting.animate();
	                }
	            });
	        }
	    };
	};

	var bushEntityFactory = Factory$3;

	var NET_TYPES = {
	    Player: 0,
	    Tree: 1,
	    Stone: 2,
	    Iron: 3,
	    Silver: 4,
	    Gold: 5,
	    Bush: 6
	};

	var ENTITIES = {};
	ENTITIES[NET_TYPES.Player] = playerEntityFactory;
	ENTITIES[NET_TYPES.Tree] = treeEntityFactory;
	ENTITIES[NET_TYPES.Stone] = rockEntityFactory('Stone');
	ENTITIES[NET_TYPES.Iron] = rockEntityFactory('Iron');
	ENTITIES[NET_TYPES.Silver] = rockEntityFactory('Silver');
	ENTITIES[NET_TYPES.Gold] = rockEntityFactory('Gold');
	ENTITIES[NET_TYPES.Bush] = bushEntityFactory;

	var STATUS = {
	    Static: 0,
	    Fighting: 1
	};

	// NOTE: Set only the props that will be sent to the client
	var PROPS = {
	    NetType: 'a',
	    Position: 'b',
	    Quaternion: 'c',
	    Scale: 'd',
	    Lerp: 'e',
	    Status: 'f',
	    Resources: 'g',
	    Inventory: 'h',
	    Equiped: 'i',
	    Life: 'j',
	    MaxLife: 'k',
	    HasDied: 'l'
	};

	var RESOURCES = {
	    Wood: 'a',
	    Stone: 'b',
	    Iron: 'c',
	    Silver: 'd',
	    Gold: 'e',
	    Food: 'f'
	};

	var INVENTORY = {
	    a: {name: 'Knife', wood: 25, stone: 25, damage: 2, range: 1, collect: 5, life: 0, buyable: true},
	    b: {name: 'Axe', wood: 50, stone: 50, damage: 1, range: 1.5, collect: 10, life: 0, buyable: true},
	    c: {name: 'Spear', wood: 100, stone: 100, damage: 3, range: 2, collect: 0, life: 0, buyable: true},
	    d: {name: 'Apple', wood: 0, stone: 0, damage: 0, range: 0, collect: 0, life: 10, buyable: false, color: 'apple'}
	};

	var ADDITIONAL_PROPERTIES = [
	    PROPS.Inventory,
	    PROPS.Equiped,
	    PROPS.Life,
	    PROPS.MaxLife
	];

	var config$1 = {
	    PROPS: PROPS,
	    NET_TYPES: NET_TYPES,
	    ENTITIES: ENTITIES,
	    STATUS: STATUS,
	    RESOURCES: RESOURCES,
	    INVENTORY: INVENTORY,
	    ADDITIONAL_PROPERTIES: ADDITIONAL_PROPERTIES
	};
	var config_1 = config$1.PROPS;
	var config_5 = config$1.RESOURCES;
	var config_6 = config$1.INVENTORY;

	var Factory$4 = function (Game) {
	    KeyboardScriptFactory(Game);
	    Game.player.body.add(Game.app.listener);

	    Game.player[config_1.Resources] = {};
	    Object.values(config_5).forEach(function (item) { return Game.player[config_1.Resources][item] = 0; });

	    Game.player[config_1.Inventory] = {};
	    Object.keys(config_6).forEach(function (id) { return Game.player[config_1.Inventory][id] = 0; });

	    Game.player.lifeBar.element.firstChild.setAttribute('data-background', 'success');

	    Game.player.addScript('buy', function (id) {
	        Game.player.socket.emit('buy', id);
	    });

	    Game.socket.on('updatePlayer', function (data) {
	        if (Game.player) {
	            Object.assign(Game.player, data);
	            if (Game.player[config_1.HasDied]) {
	                Game.player.remove = true;
	            }
	        }
	    });

	    Game.socket.on('leaderboard', function (leaderboard) { return Game.leaderboard = leaderboard; });

	    // Camera
	    Game.player.addScript('topDownCamera', function (dt) {
	        Game.app.camera.position.copy(Game.player.body.position);
	        Game.app.camera.position.y += 15;
	        Game.app.camera.position.z += 8;
	        Game.app.camera.lookAt(Game.player.body.position);
	    });

	    Game.player.addScript('tick', function (dt) {
	        Game.player.runScript('topDownCamera', dt);
	    });
	    Game.player.addScript('destroy', function () {
	        setTimeout(function () {
	            Game.is.connected = false;
	            Game.player = undefined;
	        }, 3000);
	    });
	};

	var PROPS$1 = config$1.PROPS;
	var NET_TYPES$1 = config$1.NET_TYPES;
	var ENTITIES$1 = config$1.ENTITIES;
	var STATUS$1 = config$1.STATUS;
	var RESOURCES$1 = config$1.RESOURCES;
	var INVENTORY$1 = config$1.INVENTORY;
	var ADDITIONAL_PROPERTIES$1 = config$1.ADDITIONAL_PROPERTIES;

	var Entities = {
	    isNode: typeof window === 'undefined',
	    PROPS: PROPS$1,
	    STATUS: STATUS$1,
	    NET_TYPES: NET_TYPES$1,
	    RESOURCES: RESOURCES$1,
	    INVENTORY: INVENTORY$1,
	    ADDITIONAL_PROPERTIES: ADDITIONAL_PROPERTIES$1,
	    Factories: {},
	    init: function init(Game) {
	        Entities.Game = Game;
	        for (var nt in ENTITIES$1) {
	            Entities.Factories[nt] = ENTITIES$1[nt]();
	        }
	    },
	    create: function create(data) {
	        if ( data === void 0 ) data = {};

	        var entity = {
	            id: data.id || (0 | Math.random() * 6.04e7).toString(36),
	            body: new THREE.Object3D(),
	            parent: undefined,
	            remove: false
	        };
	        entity[PROPS$1.NetType] = data[PROPS$1.NetType] || 0;
	        entity[PROPS$1.Position] = data[PROPS$1.Position] || {x: 0, y: 1, z: 0};
	        entity[PROPS$1.Quaternion] = data[PROPS$1.Quaternion] || {x: 0, y: 0, z: 0, w: 0};
	        entity[PROPS$1.Scale] = data[PROPS$1.Scale] || 1;
	        entity[PROPS$1.Lerp] = data[PROPS$1.Lerp] || 1;
	        entity[PROPS$1.Status] = data[PROPS$1.Status] || 0;
	        entity.name = data.name;
	        entity.destroy = function destroy() {
	                if (entity) {
	                    entity.runScript('destroy');
	                    if (entity && entity.body && entity.body.parent) {
	                        entity.body.parent.remove(entity.body);
	                    }

	                    if (Entities.isNode) {
	                        delete Game.worlds[entity.world].children[entity.id];
	                    }

	                    delete entity.parent.children[entity.id];
	                    entity = undefined;
	                }
	            };
	        entity.update = function update(dt) {
	                // Update position on the client
	                if (!Entities.isNode) {
	                    if (entity[PROPS$1.Lerp] === 1) {
	                        entity.body.position.copy(entity[PROPS$1.Position]);
	                    } else if (entity[PROPS$1.Lerp] < 1) {
	                        entity.body.position.lerp(
	                            new THREE.Vector3(
	                                entity[PROPS$1.Position].x,
	                                entity[PROPS$1.Position].y,
	                                entity[PROPS$1.Position].z
	                            ),
	                            entity[PROPS$1.Lerp]
	                        );
	                    }

	                    entity.body.quaternion.copy(entity[PROPS$1.Quaternion]);
	                }

	                entity.runScript('start', dt);

	                entity.runEveryTimers();

	                entity.runScript('tick', dt);

	                // Copy position that will be sent to the client
	                if (Entities.isNode) {
	                    entity[PROPS$1.Position] = entity.body.position;
	                    entity[PROPS$1.Quaternion] = entity.body.quaternion;
	                }

	                entity.runScript('end', dt);

	                if (Entities.isNode && entity.remove) {
	                    entity.destroy();
	                }
	            };
	        entity.every = function every(nameOrTime, handler) {
	                if (entity.timers[nameOrTime] === undefined) {
	                    entity.timers[nameOrTime] = {
	                        timer: Date.now(),
	                        handlers: []
	                    };
	                }

	                if (typeof handler === 'function') {
	                    entity.timers[nameOrTime].handlers.push(handler);
	                }
	                return;
	            };
	        entity.runEveryTimers = function runEveryTimers() {
	                for (var i in entity.timers) {
	                    if (
	                        entity.timers[i].handlers.length > 0 &&
	                        Date.now() - entity.timers[i].timer > +i
	                    ) {
	                        var dt = (Date.now() - entity.timers[i].timer) * .001;
	                        for (var k = 0, l = entity.timers[i].handlers.length; k < l; k++) {
	                            entity.timers[i].handlers[k](dt);
	                        }
	                        entity.timers[i].timer = Date.now();
	                    }
	                }
	            };
	        entity.timers = {
	                // '100': {timer: Date.now(), handlers: []},
	            };
	        entity.addScript = function addScript(name, handler) {
	                if (entity.scripts[name] === undefined) {
	                    entity.scripts[name] = [];
	                }

	                if (typeof handler === 'function') {
	                    entity.scripts[name].push(handler);
	                }
	            };
	        entity.runScript = function runScript(name) {
	                var ref;

	                var args = [], len = arguments.length - 1;
	                while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];
	                if (entity.scripts[name].length > 0) {
	                    for (var i = 0, l = entity.scripts[name].length; i < l; i++) {
	                        (ref = entity.scripts[name])[i].apply(ref, args);
	                    }
	                }
	            };
	        entity.scripts = {
	                'start': [],
	                'tick': [],
	                'end': [],
	                'destroy': []
	            };
	        entity.limit = function limit(distance) {
	                if ( distance === void 0 ) distance = 100;

	                if (entity.body.position.x < -distance) {
	                    entity.body.position.x = -distance;
	                }
	                if (entity.body.position.x > distance) {
	                    entity.body.position.x = distance;
	                }
	                if (entity.body.position.z < -distance) {
	                    entity.body.position.z = -distance;
	                }
	                if (entity.body.position.z > distance) {
	                    entity.body.position.z = distance;
	                }
	            };

	        var Factory = Entities.Factories[entity[PROPS$1.NetType]];

	        // Clone the model and set its initial position
	        // At serverside we don't need the real model, just handle the Object3D props
	        if (
	            !Entities.isNode
	            && Factory.Model
	            && Entities.Game.models[Factory.Model]
	        ) {
	            var Model = Entities.Game.models[Factory.Model].clone();
	            Model.name = 'Model';
	            entity.body.add(Model);
	        }

	        entity.body.position.set(
	            entity[PROPS$1.Position].x,
	            entity[PROPS$1.Position].y,
	            entity[PROPS$1.Position].z
	        );

	        entity.body.quaternion.set(
	            entity[PROPS$1.Quaternion].x,
	            entity[PROPS$1.Quaternion].y,
	            entity[PROPS$1.Quaternion].z,
	            entity[PROPS$1.Quaternion].w
	        );

	        // Init the entity

	        if (Entities.isNode && typeof Factory.initServer === 'function') {
	            Factory.initServer(entity, Entities);
	        }

	        if (!Entities.isNode && typeof Factory.initClient === 'function') {
	            Factory.initClient(entity, Entities);
	        }

	        // Set the world and the socket that belongs to this entity if any
	        if (Entities.isNode) {
	            entity.world = data.world;
	        }

	        // If there is a socket property add it to the entity
	        if (data.socket !== undefined) {
	            entity.socket = data.socket;
	        }

	        return entity;
	    }
	};

	var entities = Entities;

	/**
	 * This keyboard handler will be used both sides (server and client)
	 * to get the pressed keys by the user
	 */

	var modifiers = {
	    '⇧': 16, shift: 16,
	    '⌥': 18, alt: 18, option: 18,
	    '⌃': 17, ctrl: 17, control: 17,
	    '⌘': 91, command: 91
	};

	var special = {
	    backspace: 8, tab: 9, clear: 12,
	    enter: 13, 'return': 13,
	    esc: 27, escape: 27, space: 32,
	    left: 37, up: 38,
	    right: 39, down: 40,
	    del: 46, 'delete': 46,
	    home: 36, end: 35,
	    pageup: 33, pagedown: 34,
	    ',': 188, '.': 190, '/': 191,
	    '`': 192, '-': 189, '=': 187,
	    ';': 186, '\'': 222,
	    '[': 219, ']': 221, '\\': 220
	};

	var f = {
	    f1: 112,
	    f2: 113,
	    f3: 114,
	    f4: 115,
	    f5: 116,
	    f6: 117,
	    f7: 118,
	    f8: 119,
	    f9: 120,
	    f10: 121,
	    f11: 122,
	    f12: 123
	};

	var mouse = {
	    left: 1,
	    right: 3,
	    middle: 2
	};

	var KeyboardFactory = function (element, preventContext) {
	    if ( preventContext === void 0 ) preventContext = true;

	    var Keyboard = {
	        target: null,
	        pressedKeys: [],
	        mouse: {
	            p: {
	                x: 0,
	                y: 0
	            },
	            b: [],
	            d: 0
	        },
	        clearMouseDelta: null,
	        code: function code(x) {
	            return special[x] ||
	                modifiers[x] ||
	                f[x] ||
	                x.toUpperCase().charCodeAt(0);
	        },
	        isKeyPressed: function isKeyPressed(x) {
	            return Keyboard.pressedKeys.indexOf(Keyboard.code('' + x)) !== -1;
	        },
	        pressKey: function pressKey(key) {
	            var code = Keyboard.code('' + key);
	            if (Keyboard.pressedKeys.indexOf(code) === -1) {
	                Keyboard.pressedKeys.push(code);
	            }
	        },
	        isButtonPressed: function isButtonPressed(x) {
	            return Keyboard.mouse.b.indexOf(mouse[x]) !== -1;
	        },
	        pressButton: function pressButton(x) {
	            if (Keyboard.mouse.b.indexOf(mouse[x]) === -1) {
	                Keyboard.mouse.b.push(mouse[x]);
	            }
	        },

	        changeHandlers: [],
	        onChange: function onChange(handler) {
	            Keyboard.changeHandlers.push(handler);
	        },
	        run: function run() {
	            var ref;

	            var args = [], len = arguments.length;
	            while ( len-- ) args[ len ] = arguments[ len ];
	            var i = 0;
	            var l = Keyboard.changeHandlers.length;
	            for (;i < l; i++) {
	                (ref = Keyboard.changeHandlers)[i].apply(ref, args);
	            }
	        },

	        keyListener: function keyListener(event) {
	            if (event.type === 'keydown') {
	                Keyboard.target = event.target;
	                if (Keyboard.pressedKeys.indexOf(event.keyCode) === -1) {
	                    Keyboard.pressedKeys.push(event.keyCode);
	                    Keyboard.run('keydown', Keyboard.pressedKeys);
	                }
	                return;
	            }

	            if (event.type === 'keyup') {
	                var index = Keyboard.pressedKeys.indexOf(event.keyCode);
	                if (index !== -1) {
	                    Keyboard.pressedKeys.splice(index, 1);
	                    Keyboard.run('keyup', Keyboard.pressedKeys);
	                }
	            }
	        },

	        mouseListener: function mouseListener(event) {
	            Keyboard.target = event.target;
	            var prevMouse = {x: Keyboard.mouse.p.x, y: Keyboard.mouse.p.y};
	            Keyboard.mouse.p.x = (event.clientX / window.innerWidth) * 2 - 1;
	            Keyboard.mouse.p.y = -(event.clientY / window.innerHeight) * 2 + 1;
	            if (Keyboard.mouse.p.x !== prevMouse.x || Keyboard.mouse.p.y !== prevMouse.y) {
	                Keyboard.run('mousemove', Keyboard.mouse.p);
	            }

	            // Fix cross browser button that triggered the event
	            event.which ? event.which :
	                event.button === 1 ? 1 :
	                    event.button === 2 ? 3 :
	                        event.button === 4 ? 2 : 1;

	            if (event.type.indexOf('mousedown') !== -1) {
	                if (Keyboard.mouse.b.indexOf(event.which) === -1) {
	                    Keyboard.mouse.b.push(event.which);
	                    Keyboard.run('mousedown', Keyboard.mouse.b);
	                }
	                return;
	            }

	            if (event.type.indexOf('mouseup') !== -1) {
	                var index = Keyboard.mouse.b.indexOf(event.which);
	                if (index !== -1) {
	                    Keyboard.mouse.b.splice(index, 1);
	                    Keyboard.run('mouseup', Keyboard.mouse.b);
	                }
	            }

	            if (event.type.indexOf('mousewheel') !== -1 || event.type.indexOf('DOMMouseScroll') !== -1) {
	                var delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));
	                Keyboard.mouse.d = delta;
	                Keyboard.run('mousewheel', Keyboard.mouse.d);
	                clearTimeout(Keyboard.clearMouseDelta);
	                Keyboard.clearMouseDelta = setTimeout(function () {
	                    Keyboard.mouse.d = 0;
	                    Keyboard.run('mousewheel', Keyboard.mouse.d);
	                }, 100);
	            }
	        },
	        addEvent: function addEvent(type, handler) {
	            if (element !== undefined) {
	                var el = typeof element === 'string'
	                    ? document.querySelectorAll(element)[0]
	                    : element;

	                if (el.addEventListener) {
	                    el.addEventListener(type, handler, false);
	                    if (type === 'mousewheel') {
	                        el.addEventListener('DOMMouseScroll', handler, false);
	                    }
	                } else {
	                    el.attachEvent(("on" + type), handler);
	                }

	            }
	        },
	        preventContext: function preventContext(event) {
	            event.preventDefault();
	        },
	        reset: function reset() {
	            Keyboard.pressedKeys = [];
	            Keyboard.mouse.b = [];
	            Keyboard.mouse.d = 0;
	        }
	    };

	    Keyboard.addEvent('keydown', Keyboard.keyListener);
	    Keyboard.addEvent('keyup', Keyboard.keyListener);
	    Keyboard.addEvent('mousemove', Keyboard.mouseListener);
	    Keyboard.addEvent('mousedown', Keyboard.mouseListener);
	    Keyboard.addEvent('mouseup', Keyboard.mouseListener);
	    Keyboard.addEvent('mousewheel', Keyboard.mouseListener);
	    Keyboard.addEvent('contextmenu', Keyboard.preventContext);

	    return Keyboard;
	};

	var keyboardFactory = KeyboardFactory;

	var AppleFactory = function () {
	    var applesGeometry = new THREE.Geometry();
	    var geometry = new THREE.SphereGeometry(0.3, 16, 16);

	    geometry.translate(0, 1.7, 0);
	    applesGeometry.merge(geometry);

	    geometry.translate(-1, -1, -1);
	    applesGeometry.merge(geometry);

	    geometry.translate(0, 0, 2);
	    applesGeometry.merge(geometry);

	    geometry.translate(2, 0, 0);
	    applesGeometry.merge(geometry);

	    geometry.translate(0, 0, -2);
	    applesGeometry.merge(geometry);

	    var buffGeometry = new THREE.BufferGeometry().fromGeometry(applesGeometry);
	    var material = new THREE.MeshStandardMaterial({ color: 0xff1122, side: THREE.DoubleSide, roughness: 1, metalness: 0 });
	    var apples = new THREE.Mesh(buffGeometry, material);
	    apples.position.set(0, 0, 0);
	    return apples;
	};

	var BushFactory = function () {
	    var ico = new THREE.Mesh(
	        new THREE.IcosahedronBufferGeometry(2),
	        new THREE.MeshStandardMaterial({color: 0x085f23, metalness: 0, roughness: 0.2})
	    );
	    ico.position.set(0, -0.4, 0);
	    ico.castShadow = true;
	    ico.receiveShadow = true;
	    ico.add(AppleFactory());
	    ico.scale.set(0.7, 0.7, 0.7);
	    return ico;
	};

	var circle = function (rad, color, segments) {
	    if ( segments === void 0 ) segments = 32;

	    var geometry = new THREE.CircleBufferGeometry(rad, segments);
	    var material = new THREE.MeshStandardMaterial({ color: color, side: THREE.DoubleSide });
	    var circle = new THREE.Mesh(geometry, material);
	    circle.receiveShadow = true;
	    return circle;
	};

	var MonkeyFactory = function () {
	    var hand = circle(0.8, 0x542207);
	    hand.position.set(-1.5, -1.5, -0.2);
	    var r = circle(0.74, 0xefcfa6);
	    r.position.set(0, 0, 0.1);
	    hand.add(r);
	    hand.castShadow = true;
	    hand.receiveShadow = true;

	    var hand2 = circle(0.8, 0x542207);
	    hand2.position.set(1.5, -1.5, -0.2);
	    var r2 = circle(0.74, 0xefcfa6);
	    r2.position.set(0, 0, 0.1);
	    hand2.add(r2);
	    hand2.castShadow = true;
	    hand2.receiveShadow = true;

	    var ear = circle(0.6, 0x542207);
	    ear.position.set(-2.1, 0, -0.2);
	    var ei = circle(0.4, 0xe0ac7d);
	    ei.position.set(0.1, -0.1, 0.1);
	    ear.add(ei);
	    ear.castShadow = true;
	    ear.receiveShadow = true;

	    var ear2 = circle(0.6, 0x542207);
	    ear2.position.set(2.1, 0, -0.2);
	    var ei2 = circle(0.4, 0xe0ac7d);
	    ei2.position.set(-0.1, -0.1, 0.1);
	    ear2.add(ei2);
	    ear2.castShadow = true;
	    ear2.receiveShadow = true;

	    var monkey = circle(2, 0x542207);

	    var mouth = circle(1, 0xefcfa6);
	    mouth.position.set(0, -1, 0.1);
	    var n = circle(0.1, 0x000000);
	    n.position.set(-0.15, -0.15, 0.1);
	    mouth.add(n);
	    var n2 = circle(0.1, 0x000000);
	    n2.position.set(0.15, -0.15, 0.1);
	    mouth.add(n2);

	    var eye1 = circle(1, 0xefcfa6);
	    eye1.position.set(-0.9, -0.1, 0.1);
	    var p = circle(0.3, 0x000000);
	    p.position.set(0, -0.2, 0.1);
	    eye1.add(p);
	    var pl = circle(0.1, 0xffffff);
	    pl.position.set(0, -0.1, 0.1);
	    p.add(pl);

	    var eye2 = circle(1, 0xefcfa6);
	    eye2.position.set(0.9, -0.1, 0.1);
	    var p2 = circle(0.3, 0x000000);
	    p2.position.set(0, -0.2, 0.1);
	    eye2.add(p2);
	    var pl2 = circle(0.1, 0xffffff);
	    pl2.position.set(0, -0.1, 0.1);
	    p2.add(pl2);

	    monkey.add(hand);
	    monkey.add(hand2);
	    monkey.add(ear2);
	    monkey.add(ear);
	    monkey.add(eye1);
	    monkey.add(eye2);
	    monkey.add(mouth);

	    monkey.rotation.x = -(Math.PI / 2);
	    monkey.scale.set(0.5, 0.5, 0.5);

	    monkey.castShadow = true;
	    monkey.receiveShadow = true;

	    var object = new THREE.Object3D();
	    object.add(monkey);
	    return object;
	};

	var RockFactory = function (Type) { return function () {
	    var data;
	    switch (Type) {
	        case 'Gold':
	            data = {color: 0xFFD700};
	            break;
	        case 'Silver':
	            data = {color: 0xCBCDCD};
	            break;
	        case 'Iron':
	            data = {color: 0x828383};
	            break;
	        case 'Stone':
	            data = {color: 0x535454};
	            break;
	    }

	    var ico = new THREE.Mesh(
	        new THREE.IcosahedronBufferGeometry(2),
	        new THREE.MeshStandardMaterial(data)
	    );
	    ico.position.set(0, -0.5, 0);
	    ico.castShadow = true;
	    ico.receiveShadow = true;
	    ico.rotation.y = -Math.PI / Math.random() * 2;

	    return ico;
	}; };

	var AppleFactory$1 = function () {
	    var applesGeometry = new THREE.Geometry();
	    var geometry = new THREE.SphereGeometry(0.3, 16, 16);

	    geometry.translate(0, 1.7, 0);
	    applesGeometry.merge(geometry);

	    geometry.translate(-1, -1, -1);
	    applesGeometry.merge(geometry);

	    geometry.translate(0, 0, 2);
	    applesGeometry.merge(geometry);

	    geometry.translate(2, 0, 0);
	    applesGeometry.merge(geometry);

	    geometry.translate(0, 0, -2);
	    applesGeometry.merge(geometry);

	    var buffGeometry = new THREE.BufferGeometry().fromGeometry(applesGeometry);
	    var material = new THREE.MeshStandardMaterial({ color: 0xff1122, side: THREE.DoubleSide, roughness: 1, metalness: 0 });
	    var apples = new THREE.Mesh(buffGeometry, material);
	    apples.position.set(0, 0, 0);
	    return apples;
	};

	var TreeFactory = function () {
	    var cylinder = new THREE.Mesh(
	        new THREE.CylinderBufferGeometry(0.2, 0.5, 2, 32),
	        new THREE.MeshStandardMaterial({color: 0x542207, metalness: 0, roughness: 1})
	    );

	    var ico = new THREE.Mesh(
	        new THREE.IcosahedronBufferGeometry(2),
	        new THREE.MeshStandardMaterial({color: 0x087f23, metalness: 0, roughness: 1})
	    );
	    ico.position.set(0, 2, 0);
	    ico.castShadow = true;
	    ico.receiveShadow = true;
	    ico.name = 'top';

	    cylinder.add(ico);
	    ico.add(AppleFactory$1());
	    cylinder.castShadow = true;
	    cylinder.receiveShadow = true;

	    return cylinder;
	};

	var circle$1 = function (rad, color, segments) {
	    if ( segments === void 0 ) segments = 32;

	    var geometry = new THREE.CircleBufferGeometry(rad, segments);
	    var material = new THREE.MeshStandardMaterial({ color: color, side: THREE.DoubleSide });
	    var circle = new THREE.Mesh(geometry, material);
	    circle.receiveShadow = true;
	    return circle;
	};

	var SheepFactory = function () {
	    var i = 0.6;
	    var sheep = circle$1(2, 0xeeedeb);
	    sheep.rotation.x = -(Math.PI / 2);
	    sheep.scale.set(0.5, 0.5, 0.5);
	    sheep.castShadow = true;
	    sheep.receiveShadow = true;

	    var eye1 = circle$1(0.2, 0x000000);
	    eye1.position.set(-0.3, -0.2, 0.2);
	    var pl1 = circle$1(0.06, 0xffffff);
	    pl1.position.set(0, -0.05, 0.2);
	    eye1.add(pl1);
	    eye1.castShadow = true;
	    eye1.receiveShadow = true;
	    sheep.add(eye1);

	    var eye2 = circle$1(0.2, 0x000000);
	    eye2.position.set(0.3, -0.2, 0.2);
	    var pl2 = circle$1(0.06, 0xffffff);
	    pl2.position.set(0, -0.05, 0.2);
	    eye2.add(pl2);
	    sheep.add(eye2);


	    var shape = new THREE.Shape();
	    shape.lineTo(i * 1, 0);
	    shape.quadraticCurveTo (i * 2, i * -2.5, i * 1, i * -3);
	    shape.quadraticCurveTo (0, i * -3.6, i * -1, i * -3);
	    shape.quadraticCurveTo (i * -2, i * -2.5, i * -1, 0);
	    var mouth = new THREE.Mesh(
	        new THREE.ShapeGeometry(shape),
	        new THREE.MeshStandardMaterial({ color: 0x515358, side: THREE.DoubleSide })
	    );
	    mouth.position.set(0, 0.5, 0.1);
	    mouth.castShadow = true;
	    mouth.receiveShadow = true;
	    sheep.add(mouth);

	    var head = circle$1(0.8, 0xeeedeb);
	    head.position.set(0, 0.7, 0.12);
	    head.scale.set(1, 0.7, 1);
	    head.castShadow = true;
	    head.receiveShadow = true;
	    sheep.add(head);

	    var k = 0.16;
	    var earshape = new THREE.Shape();
	    earshape.lineTo(k * 0.5, 0);
	    earshape.quadraticCurveTo (k * 0.3, k * -4, k * 1, k * -6);
	    earshape.quadraticCurveTo (0, k * -7.2, k * -1, k * -6);
	    earshape.quadraticCurveTo (k * -2, k * -4, k * -0.5, 0);
	    var ear = new THREE.Mesh(
	        new THREE.ShapeGeometry(earshape),
	        new THREE.MeshStandardMaterial({ color: 0x000000, side: THREE.DoubleSide })
	    );
	    ear.position.set(-0.5, 0.6, 0.1);
	    ear.rotation.z = -Math.PI / 4;
	    ear.castShadow = true;
	    ear.receiveShadow = true;
	    sheep.add(ear);

	    var ear2 = new THREE.Mesh(
	        new THREE.ShapeGeometry(earshape),
	        new THREE.MeshStandardMaterial({ color: 0x000000, side: THREE.DoubleSide })
	    );
	    ear2.position.set(0.5, 0.6, 0.1);
	    ear2.rotation.z = -Math.PI / 4;
	    ear2.rotation.y = Math.PI;
	    ear2.castShadow = true;
	    ear2.receiveShadow = true;
	    sheep.add(ear2);

	    var object = new THREE.Object3D();
	    object.add(sheep);
	    return object;
	};

	var KnifeFactory = function (Type) { return function () {
	    var color;
	    switch (Type) {
	        case 'Gold':
	            color = 0xFFD700;
	            break;
	        case 'Silver':
	            color = 0xCBCDCD;
	            break;
	        case 'Iron':
	            color = 0x828383;
	            break;
	        case 'Stone':
	            color = 0x535454;
	            break;
	    }

	    var i = 0.3;

	    var shape = new THREE.Shape();

	    shape.lineTo(i * 1.5, 0);
	    shape.lineTo(i * 1.5, i * 4);
	    shape.bezierCurveTo (0, i * 3, 0, i * 2, 0, 0);

	    var mesh = new THREE.Mesh(
	        new THREE.ShapeGeometry(shape),
	        new THREE.MeshStandardMaterial({ color: color, side: THREE.DoubleSide })
	    );
	    mesh.position.set(-1, 0, 1.2);
	    mesh.rotation.x = -Math.PI / 2;
	    mesh.rotation.z = Math.PI / 2;
	    mesh.castShadow = true;
	    mesh.receiveShadow = true;

	    var plane = new THREE.Mesh(
	        new THREE.PlaneBufferGeometry(i / 2, i * 2, 1, 1),
	        new THREE.MeshStandardMaterial({ color: 0x542207, side: THREE.DoubleSide })
	    );
	    plane.position.set(i, -i, 0);
	    plane.castShadow = true;
	    plane.receiveShadow = true;

	    mesh.add(plane);
	    mesh.name = 'Knife';
	    return mesh;
	}; };

	var KnifeFactory$1 = function (Type) { return function () {
	    var color;
	    switch (Type) {
	        case 'Gold':
	            color = 0xFFD700;
	            break;
	        case 'Silver':
	            color = 0xCBCDCD;
	            break;
	        case 'Iron':
	            color = 0x828383;
	            break;
	        case 'Stone':
	            color = 0x535454;
	            break;
	    }

	    var i = 0.3;

	    var shape = new THREE.Shape();

	    shape.lineTo(i * 1.7, 0);
	    shape.lineTo(i * 2, i * 4);
	    shape.lineTo(-i, i * 4.5);

	    var mesh = new THREE.Mesh(
	        new THREE.ShapeGeometry(shape),
	        new THREE.MeshStandardMaterial({ color: color, side: THREE.DoubleSide })
	    );
	    mesh.position.set(-1, 0, 1.2);
	    mesh.rotation.x = -Math.PI / 2;
	    mesh.rotation.z = Math.PI / 2;
	    mesh.castShadow = true;
	    mesh.receiveShadow = true;

	    var plane = new THREE.Mesh(
	        new THREE.PlaneBufferGeometry(i, i * 6, 1, 1),
	        new THREE.MeshStandardMaterial({ color: 0x542207, side: THREE.DoubleSide })
	    );
	    plane.position.set(i, -i * 3, 0);
	    plane.castShadow = true;
	    plane.receiveShadow = true;

	    mesh.add(plane);
	    mesh.name = 'Knife';
	    return mesh;
	}; };

	var KnifeFactory$2 = function (Type) { return function () {
	    var color;
	    switch (Type) {
	        case 'Gold':
	            color = 0xFFD700;
	            break;
	        case 'Silver':
	            color = 0xCBCDCD;
	            break;
	        case 'Iron':
	            color = 0x828383;
	            break;
	        case 'Stone':
	            color = 0x535454;
	            break;
	    }

	    var i = 0.3;

	    var shape = new THREE.Shape();
	    shape.moveTo(i / 4, 0, 0);
	    shape.lineTo(i * 1.5, 0);
	    shape.lineTo(i * 2, i);
	    shape.lineTo(i, i * 5);
	    shape.lineTo(-0.05, i);

	    var mesh = new THREE.Mesh(
	        new THREE.ShapeGeometry(shape),
	        new THREE.MeshStandardMaterial({ color: color, side: THREE.DoubleSide })
	    );
	    mesh.position.set(-1.4, 0, 1.2);
	    mesh.rotation.x = -Math.PI / 2;
	    mesh.rotation.z = Math.PI / 2;
	    mesh.castShadow = true;
	    mesh.receiveShadow = true;

	    var plane = new THREE.Mesh(
	        new THREE.PlaneBufferGeometry(i, i * 10, 1, 1),
	        new THREE.MeshStandardMaterial({ color: 0x542207, side: THREE.DoubleSide })
	    );
	    plane.position.set(i * 0.9, -i * 5, 0);
	    plane.castShadow = true;
	    plane.receiveShadow = true;

	    mesh.add(plane);
	    mesh.name = 'Knife';
	    return mesh;
	}; };

	var AppleFactory$2 = function () {
	    var geometry = new THREE.SphereBufferGeometry(0.5, 16, 16);
	    var material = new THREE.MeshStandardMaterial({ color: 0xff1122, side: THREE.DoubleSide, roughness: 1, metalness: 0 });
	    var apples = new THREE.Mesh(geometry, material);
	    apples.castShadow = true;
	    apples.receiveShadow = true;
	    apples.position.set(-0.9, 0, 1.2);
	    return apples;
	};

	var Models = {
	    Bush: BushFactory,
	    Monkey: MonkeyFactory,
	    Stone: RockFactory('Stone'),
	    Iron: RockFactory('Iron'),
	    Silver: RockFactory('Silver'),
	    Gold: RockFactory('Gold'),
	    Tree: TreeFactory,
	    Sheep: SheepFactory,

	    StoneKnife: KnifeFactory('Stone'),
	    IronKnife: KnifeFactory('Iron'),
	    SilverKnife: KnifeFactory('Silver'),
	    GoldKnife: KnifeFactory('Gold'),

	    StoneAxe: KnifeFactory$1('Stone'),
	    IronAxe: KnifeFactory$1('Iron'),
	    SilverAxe: KnifeFactory$1('Silver'),
	    GoldAxe: KnifeFactory$1('Gold'),

	    StoneSpear: KnifeFactory$2('Stone'),
	    IronSpear: KnifeFactory$2('Iron'),
	    SilverSpear: KnifeFactory$2('Silver'),
	    GoldSpear: KnifeFactory$2('Gold'),

	    Apple: AppleFactory$2
	};

	var Factory$5 = function (color) {
	    var element = document.createElement('div');
	    element.className = 'bar';
	    var child = document.createElement('div');
	    child.style.width = '100%';
	    child.setAttribute('data-background', color);
	    element.appendChild(child);

	    return new THREE.CSS2DObject(element);
	};

	var Factory$6 = function (text) {
	    if ( text === void 0 ) text = '';

	    var element = document.createElement('div');
	    element.className = 'label';
	    element.innerText = text;

	    return new THREE.CSS2DObject(element);
	};

	var CssModels = {
	    BarFactory: Factory$5,
	    LabelFactory: Factory$6
	};

	/**
	 * @author Christian Cesar Robledo Lopez aka Masquerade circus (christian@masquerade-circus.net)
	 */
	(function () {
	    var CanvasMap = function (element, width, height, contextMode) {
	        var canvas = {};
	        canvas.elementsSorted = [];
	        canvas.element = element;
	        canvas.contextMode = contextMode || '2d';
	        canvas.context = canvas.element.getContext(canvas.contextMode);
	        canvas.useRadians = false;
	        canvas.zoom = 1;
	        canvas.world = {
	            width: width,
	            height: height,
	            rotation: 0
	        };
	        canvas.scale = {
	            width: 0,
	            height: 0
	        };
	        canvas.elements = {};

	        canvas.randomId = function () {
	            var id = (0 | Math.random() * 9e6).toString(36);
	            if (canvas.elements[id] !== undefined) {
	                id = canvas.randomId();
	            }

	            return id;
	        };

	        canvas.sortElements = function () {
	            canvas.elementsSorted = [];
	            for (var id in canvas.elements) {
	                canvas.elementsSorted.push(canvas.elements[id]);
	            }
	            canvas.elementsSorted.sort(function (a, b) {
	                return a.z - b.z;
	            });
	        };

	        canvas.add = function (object) {
	            if (object) {
	                object.id = object.id || canvas.randomId();
	                if (canvas.elements[object.id] === undefined) {
	                    canvas.elements[object.id] = object;
	                    canvas.sortElements();
	                }
	            }

	            return canvas;
	        };

	        canvas.remove = function (object) {
	            if (object && object.id && canvas.elements[object.id]) {
	                delete canvas.elements[object.id];
	                canvas.sortElements();
	            }

	            return canvas;
	        };

	        canvas.draw = function () {
	            var newWidth = (canvas.context.canvas.width * canvas.zoom);
	            var newHeight = (canvas.context.canvas.height * canvas.zoom);

	            canvas.scale.width = 1 / canvas.world.width * canvas.context.canvas.width;
	            canvas.scale.height = 1 / canvas.world.height * canvas.context.canvas.height;

	            canvas.context.resetTransform();

	            canvas.context.clearRect(0, 0, canvas.context.canvas.width, canvas.context.canvas.height);

	            if (canvas.world.rotation) {
	                canvas.context.translate(canvas.context.canvas.width / 2, canvas.context.canvas.height / 2);

	                canvas.context.rotate(
	                    canvas.useRadians ?
	                        canvas.world.rotation :
	                        Math.PI / 180 * canvas.world.rotation
	                );

	                canvas.context.translate(-canvas.context.canvas.width / 2, -canvas.context.canvas.height / 2);
	            }

	            canvas.context.translate(
	                -((newWidth - canvas.context.canvas.width) / 2),
	                -((newHeight - canvas.context.canvas.height) / 2)
	            );
	            canvas.context.scale(canvas.zoom, canvas.zoom);

	            canvas.elementsSorted.forEach(function (element) {
	                element.draw();
	            });

	            return canvas;
	        };

	        canvas.toWorld = function (obj) {
	            var result = Object.assign({}, obj);
	            if (obj.x && obj.x !== 0) {
	                result.x = obj.x * canvas.scale.width;
	            }

	            if (obj.y && obj.y !== 0) {
	                result.y = obj.y * canvas.scale.height;
	            }

	            if (obj.r && obj.r !== 0) {
	                result.r = obj.r * canvas.scale.width;
	            }

	            if (obj.width && obj.width !== 0) {
	                result.width = obj.width * canvas.scale.width;
	            }

	            if (obj.height && obj.height !== 0) {
	                result.height = obj.height * canvas.scale.height;
	            }

	            if (obj.size && obj.size !== 0) {
	                result.size = obj.size * canvas.scale.width;
	            }

	            if (obj.rotation && obj.rotation !== 0) {
	                result.rotation =
	                    canvas.useRadians ?
	                        obj.rotation :
	                        Math.PI / 180 * obj.rotation;
	            }

	            delete result.draw;
	            delete result.id;
	            delete result.toWorld;

	            return result;
	        };

	        canvas.point = function (options) {
	            var el = Object.assign(
	                {
	                    id: undefined,
	                    x: 0,
	                    y: 0,
	                    r: 1,
	                    fill: undefined,
	                    stroke: options.stroke ? {
	                        color: options.stroke.color || 'black',
	                        width: options.stroke.width || 1
	                    } : undefined,
	                    z: 0
	                },
	                options
	            );

	            el.toWorld = function () {
	                return canvas.toWorld(el);
	            };

	            el.draw = function () {
	                var worldPosition = el.toWorld();
	                if (el.fill) {
	                    canvas.context.fillStyle = el.fill;
	                    canvas.context.beginPath();
	                    canvas.context.arc(
	                        worldPosition.x,
	                        worldPosition.y,
	                        worldPosition.r,
	                        0,
	                        Math.PI * 2,
	                        true
	                    );
	                    canvas.context.fill();
	                }

	                if (el.stroke) {
	                    canvas.context.strokeStyle = el.stroke.color;
	                    canvas.context.lineWidth = el.stroke.width * canvas.scale.width;
	                    canvas.context.beginPath();
	                    canvas.context.arc(
	                        worldPosition.x,
	                        worldPosition.y,
	                        worldPosition.r,
	                        0,
	                        Math.PI * 2,
	                        true
	                    );
	                    canvas.context.stroke();
	                }
	            };

	            return el;
	        };

	        canvas.rect = function (options) {
	            var el = Object.assign(
	                {
	                    id: undefined,
	                    x: 0,
	                    y: 0,
	                    width: 1,
	                    height: 1,
	                    fill: undefined,
	                    stroke: options.stroke ? {
	                        color: options.stroke.color || 'black',
	                        width: options.stroke.width || 1
	                    } : undefined,
	                    z: 0
	                },
	                options
	            );

	            el.toWorld = function () {
	                return canvas.toWorld(el);
	            };

	            el.draw = function () {
	                var worldPosition = el.toWorld();

	                if (el.fill) {
	                    canvas.context.fillStyle = el.fill;
	                    canvas.context.fillRect(worldPosition.x, worldPosition.y, worldPosition.width, worldPosition.height);
	                }

	                if (el.stroke) {
	                    canvas.context.strokeStyle = el.stroke.color;
	                    canvas.context.lineWidth = el.stroke.width * canvas.scale.width;
	                    canvas.context.strokeRect(worldPosition.x, worldPosition.y, worldPosition.width, worldPosition.height);
	                }
	            };

	            return el;
	        };

	        canvas.triangle = function (options) {
	            var el = Object.assign(
	                {
	                    id: undefined,
	                    x: 0,
	                    y: 0,
	                    size: 1,
	                    rotation: 0,
	                    fill: undefined,
	                    stroke: options.stroke ? {
	                        color: options.stroke.color || 'black',
	                        width: options.stroke.width || 1
	                    } : undefined,
	                    z: 0
	                },
	                options
	            );

	            el.toWorld = function () {
	                return canvas.toWorld(el);
	            };

	            el.draw = function () {
	                var worldPosition = el.toWorld();
	                var s = worldPosition.size / 2;
	                canvas.context.save();
	                canvas.context.translate(worldPosition.x, worldPosition.y);
	                canvas.context.rotate(worldPosition.rotation);
	                canvas.context.translate(-(worldPosition.x), -(worldPosition.y));

	                if (el.fill) {
	                    canvas.context.fillStyle = el.fill;
	                    canvas.context.beginPath();
	                    canvas.context.moveTo(worldPosition.x - s, worldPosition.y + s);
	                    canvas.context.lineTo(worldPosition.x, worldPosition.y - worldPosition.size);
	                    canvas.context.lineTo(worldPosition.x + s, worldPosition.y + s);
	                    canvas.context.lineTo(worldPosition.x - s, worldPosition.y + s);
	                    canvas.context.fill();
	                }

	                if (el.stroke) {
	                    canvas.context.strokeStyle = el.stroke.color;
	                    canvas.context.lineWidth = el.stroke.width * canvas.scale.width;
	                    canvas.context.beginPath();
	                    canvas.context.moveTo(worldPosition.x - s, worldPosition.y + s);
	                    canvas.context.lineTo(worldPosition.x, worldPosition.y - worldPosition.size);
	                    canvas.context.lineTo(worldPosition.x + s, worldPosition.y + s);
	                    canvas.context.lineTo(worldPosition.x - s, worldPosition.y + s);
	                    canvas.context.stroke();
	                }

	                canvas.context.restore();
	            };

	            return el;
	        };

	        canvas.text = function (options) {
	            var el = Object.assign(
	                {
	                    id: undefined,
	                    x: 0,
	                    y: 0,
	                    text: '',
	                    width: undefined,
	                    font: 'serif',
	                    size: 48,
	                    align: 'center',
	                    baseline: 'alphabetic',
	                    fill: undefined,
	                    stroke: options.stroke ? {
	                        color: options.stroke.color || 'black',
	                        width: options.stroke.width || 1
	                    } : undefined,
	                    z: 0
	                },
	                options
	            );

	            el.toWorld = function () {
	                return canvas.toWorld(el);
	            };

	            el.draw = function () {
	                var worldPosition = el.toWorld();
	                canvas.context.textAlign = el.align;
	                canvas.context.textBaseline = el.baseline;
	                canvas.context.font = worldPosition.size + 'px ' + el.font;

	                if (el.fill) {
	                    canvas.context.fillStyle = el.fill;
	                    canvas.context.fillText(el.text, worldPosition.x, worldPosition.y, worldPosition.width);
	                }

	                if (el.stroke) {
	                    canvas.context.strokeStyle = el.stroke.color;
	                    canvas.context.lineWidth = el.stroke.width * canvas.scale.width;
	                    canvas.context.strokeText(el.text, worldPosition.x, worldPosition.y, worldPosition.width);
	                }
	            };

	            return el;
	        };

	        return canvas;
	    };
	    (typeof window !== 'undefined' ? window : global).CanvasMap = CanvasMap;
	}());

	var MinimapFactory = function (Game) {
	    var worldsize = 200;
	    var canvas = document.createElement('canvas');
	    canvas.setAttribute('width', '150');
	    canvas.setAttribute('height', '150');
	    canvas.setAttribute('tabindex', '0');
	    canvas.setAttribute('id', 'minimap');

	    var map = CanvasMap(canvas, worldsize, worldsize);
	    map.useRadians = true;
	    map.zoom = 1;
	    var middle = worldsize / 2;

	    var fps = 30;
	    var time = performance.now();

	    var compass = {
	        x: map.text({ x: middle, y: middle, text: '+', fill: 'rgba(255,255,255,0.4)', size: 40, baseline: 'middle' }),
	        n: map.text({ x: middle, y: middle - 40, text: 'N', fill: 'rgba(255,255,255,0.4)', size: 20, baseline: 'middle' }),
	        s: map.text({ x: middle, y: middle + 40, text: 'S', fill: 'rgba(255,255,255,0.4)', size: 20, baseline: 'middle' }),
	        w: map.text({ x: middle - 40, y: middle, text: 'W', fill: 'rgba(255,255,255,0.4)', size: 20, baseline: 'middle' }),
	        e: map.text({ x: middle + 40, y: middle, text: 'E', fill: 'rgba(255,255,255,0.4)', size: 20, baseline: 'middle' })
	    };

	    map
	        .add(compass.x)
	        .add(compass.n)
	        .add(compass.s)
	        .add(compass.w)
	        .add(compass.e)
	    ;

	    var colors = {};
	    colors[entities.NET_TYPES.Stone] = '#424343';
	    colors[entities.NET_TYPES.Iron] = '#828383';
	    colors[entities.NET_TYPES.Silver] = '#CBCDCD';
	    colors[entities.NET_TYPES.Gold] = '#FFD700';
	    colors[entities.NET_TYPES.Player] = '#F44336';
	    colors[entities.NET_TYPES.Bush] = '#4CAF50';
	    colors[entities.NET_TYPES.Tree] = '#5D4037';

	    var addPoint = function (entity) {
	        if (colors[entity[entities.PROPS.NetType]] !== undefined) {
	            map.add(map.point({
	                x: entity.body.position.x,
	                y: entity.body.position.z,
	                id: entity.id,
	                nt: entity[entities.PROPS.NetType],
	                r: entity[entities.PROPS.NetType] === entities.NET_TYPES.Player ? 5 : 4,
	                fill: entity.id === Game.player.id ? 'white' : colors[entity[entities.PROPS.NetType]],
	                stroke: {
	                    color: 'rgba(0,0,0,0.4)',
	                    width: entity[entities.PROPS.NetType] === entities.NET_TYPES.Player ? 4 : 1
	                },
	                z: 1
	            }));
	        }
	    };


	    var loop = function () {
	        if (performance.now() - time > 1000 / fps) {
	            if (Game.player === undefined) {
	                for (var id in map.elements) {
	                    if (map.elements[id].nt !== undefined) {
	                        map.remove(map.elements[id]);
	                    }
	                }
	            }

	            if (Game.player !== undefined) {
	                for (var id$1 in map.elements) {
	                    if (
	                        map.elements[id$1].nt !== undefined
	                        && Game.children[id$1] === undefined
	                    ) {
	                        map.remove(map.elements[id$1]);
	                    }
	                }

	                for (var id$2 in Game.children) {
	                    if (map.elements[id$2] === undefined) {
	                        addPoint(Game.children[id$2]);
	                    }

	                    if (map.elements[id$2] !== undefined) {
	                        map.elements[id$2].x = Game.children[id$2].body.position.x + middle;
	                        map.elements[id$2].y = Game.children[id$2].body.position.z + middle;
	                    }
	                }
	            }

	            map.draw();
	            time = performance.now();
	        }

	    };

	    map.update = loop;

	    return map;
	};

	var Game$1 = {
	    config: config,
	    clock: null,
	    is: {
	        ready: false,
	        connecting: false,
	        connected: false
	    },
	    ready: false,
	    quality: 0.7,
	    app: null,
	    children: {},
	    keyboard: null,
	    canvas: null,
	    css2d: null,
	    minimap: null,
	    models: {},
	    cssModels: CssModels,
	    name: '',
	    leaderboard: [],
	    url: null,
	    audio: {
	        ambient: null,
	        fight: null
	    },
	    initGame: function initGame() {return __async(function*(){
	        var loc = window.location;
	        Game$1.url = loc.origin || (loc.protocol
	            + '//'
	            + loc.hostname
	            + (loc.port ? (':' + loc.port) : ''));
	        for (var name in Models) {
	            Game$1.models[name] = Models[name]();
	        }
	        AppFactory(Game$1);
	        Game$1.setQuality();

	        entities.init(Game$1);
	        Game$1.connection = ConnectionFactory(Game$1);
	        Game$1.connection.initSocket(Game$1.url);
	        Game$1.keyboard = keyboardFactory(document.body);

	        Game$1.minimap = MinimapFactory(Game$1);
	        Game$1.clock = new THREE.Clock(true);
	        Game$1.update();
	        yield Game$1.getWorlds();
	        Game$1.is.ready = true;
	    }())},
	    update: function update() {
	        requestAnimationFrame(Game$1.update);
	        var dt = Game$1.clock.getDelta();

	        for (var i in Game$1.children) {
	            Game$1.children[i].update(dt);
	        }

	        Game$1.app.renderer.render(Game$1.app.scene, Game$1.app.camera);
	        Game$1.app.css2drenderer.render(Game$1.app.scene, Game$1.app.camera);
	        Game$1.minimap.update();
	    },
	    setQuality: function setQuality(pixelRatio) {
	        if ( pixelRatio === void 0 ) pixelRatio = 0.7;

	        Game$1.quality = pixelRatio;
	        Game$1.app.renderer.setPixelRatio(window.devicePixelRatio * Game$1.quality);
	        Game$1.app.renderer.setSize(window.innerWidth, window.innerHeight);
	    },
	    addEntity: function addEntity(childEntity) {
	        Game$1.children[childEntity.id] = childEntity;
	        childEntity.parent = Game$1;
	        Game$1.app.scene.add(childEntity.body);
	    },
	    updateWorld: function updateWorld(worldEntities) {
	        for (var i in Game$1.children) {
	            if (worldEntities[i] === undefined) {
	                Game$1.children[i].destroy();
	            }
	        }

	        for (var i$1 in worldEntities) {
	            /**
	             * Entity must be undefined and must not be the player,
	             * we will handle the creation of the creation of the player entity
	             * when the connectServer promise resolve
	             */
	            if (Game$1.children[i$1] === undefined && worldEntities[i$1].id !== Game$1.socket.id) {
	                var entity = entities.create(worldEntities[i$1]);
	                Game$1.addEntity(entity);
	            } else {
	                if (Game$1.children[i$1] !== undefined) {
	                    Object.assign(Game$1.children[i$1], worldEntities[i$1]);
	                }
	            }
	        }
	    },
	    setPlayerScripts: Factory$4,
	    connectServer: function connectServer() {return __async(function*(){
	        if (Game$1.is.ready && !Game$1.is.connecting && !Game$1.is.connected) {
	            Game$1.is.connecting = true;
	            var player = yield Game$1.connection.connectServer(Game$1.name, Game$1.selectedWorld);
	            var entity = entities.create(player);
	            Game$1.addEntity(entity);
	            Game$1.player = entity;
	            Game$1.setPlayerScripts(Game$1);
	            Game$1.is.connected = true;
	            Game$1.is.connecting = false;
	        }
	    }())},
	    selectedWorld: null,
	    worlds: {},
	    getWorlds: function getWorlds() {return __async(function*(){
	        var worlds = yield Game$1.connection.getWorlds();
	        var selected = false;
	        for (var world in worlds) {
	            worlds[world].selected = false;
	            worlds[world].disabled = false;
	            if (
	                !selected &&
	                worlds[world].playerCount < worlds[world].maxPlayers
	            ) {
	                worlds[world].selected = true;
	                Game$1.selectedWorld = world;
	                selected = true;
	            }
	            if (worlds[world].playerCount >= worlds[world].maxPlayers) {
	                worlds[world].disabled = true;
	            }
	        }
	        Game$1.worlds = worlds;
	    }())},
	    selectWorld: function selectWorld(name) {
	        for (var world in Game$1.worlds) {
	            if (world === name) {
	                Game$1.worlds[world].selected = true;
	                Game$1.selectedWorld = world;
	            } else {
	                Game$1.worlds[world].selected = false;
	            }
	        }
	    },
	    fixedProps: function fixedProps(obj, precision) {
	        if ( obj === void 0 ) obj = {};
	        if ( precision === void 0 ) precision = 3;

	        var o = Array.isArray(obj) ? [] : {};

	        for (var i in obj) {
	            if (typeof obj[i] === 'object') {
	                o[i] = Game$1.fixedProps(obj[i]);
	                continue;
	            }

	            if (typeof obj[i] === 'number') {
	                o[i] = +(obj[i]).toFixed(precision);
	                continue;
	            }

	            o[i] = obj[i];
	        }

	        return o;
	    }
	};

	var logo = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"176.48909mm\"\n   height=\"156.44621mm\"\n   viewBox=\"0 0 176.48909 156.44621\"\n   version=\"1.1\"\n   id=\"svg8\"\n   sodipodi:docname=\"icon.svg\"\n   inkscape:version=\"0.92.3 (unknown)\">\n  <defs\n     id=\"defs2\">\n    <marker\n       inkscape:stockid=\"Arrow1Lstart\"\n       orient=\"auto\"\n       refY=\"0\"\n       refX=\"0\"\n       id=\"Arrow1Lstart\"\n       style=\"overflow:visible\"\n       inkscape:isstock=\"true\">\n      <path\n         id=\"path4646\"\n         d=\"M 0,0 5,-5 -12.5,0 5,5 Z\"\n         style=\"fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.00000003pt;stroke-opacity:1\"\n         transform=\"matrix(0.8,0,0,0.8,10,0)\"\n         inkscape:connector-curvature=\"0\" />\n    </marker>\n    <inkscape:path-effect\n       effect=\"sketch\"\n       id=\"path-effect132\"\n       is_visible=\"true\"\n       nbiter_approxstrokes=\"1\"\n       strokelength=\"58\"\n       strokelength_rdm=\"0.3;1\"\n       strokeoverlap=\"0.3\"\n       strokeoverlap_rdm=\"0.3;1\"\n       ends_tolerance=\"0.1;1\"\n       parallel_offset=\"5;1\"\n       tremble_size=\"5;1\"\n       tremble_frequency=\"1\"\n       nbtangents=\"5\"\n       tgt_places_rdmness=\"1;1\"\n       tgtscale=\"10\"\n       tgtlength=\"100\"\n       tgtlength_rdm=\"0.3;1\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.35\"\n     inkscape:cx=\"20.622338\"\n     inkscape:cy=\"521.67137\"\n     inkscape:document-units=\"mm\"\n     inkscape:current-layer=\"g35\"\n     showgrid=\"false\"\n     inkscape:window-width=\"1366\"\n     inkscape:window-height=\"707\"\n     inkscape:window-x=\"0\"\n     inkscape:window-y=\"182\"\n     inkscape:window-maximized=\"1\" />\n  <metadata\n     id=\"metadata5\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Capa 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\"\n     transform=\"translate(54.06917,9.4140717)\">\n    <g\n       id=\"g35\"\n       transform=\"matrix(0.26458333,0,0,0.26458333,14.07984,50.999428)\">\n      <g\n         id=\"g14\"\n         data-name=\"Layer1 0 FILL\"\n         inkscape:export-xdpi=\"72\"\n         inkscape:export-ydpi=\"72\">\n        <path\n           id=\"path12\"\n           transform=\"translate(-9.13,-15.03)\"\n           d=\"m 60,43.15 a 5.41,5.41 0 0 0 -0.3,1.9 5,5 0 0 0 0.3,1.85 q 0.35,0.8 0.8,0.8 0.45,0 0.75,-0.8 A 4.36,4.36 0 0 0 61.9,45 4.72,4.72 0 0 0 61.55,43.1 q -0.3,-0.75 -0.75,-0.75 -0.45,0 -0.8,0.75 M 32.25,46.9 A 4.36,4.36 0 0 0 32.6,45 4.72,4.72 0 0 0 32.25,43.1 q -0.3,-0.75 -0.75,-0.75 -0.45,0 -0.8,0.75 a 5.41,5.41 0 0 0 -0.3,1.9 5,5 0 0 0 0.3,1.85 q 0.35,0.8 0.8,0.8 0.45,0 0.75,-0.75 z\"\n           inkscape:connector-curvature=\"0\" />\n      </g>\n      <path\n         id=\"path16\"\n         d=\"m 235.00085,362.92398 a 139.33445,139.33445 0 0 1 -26.3737,-2.92139 l -20.69327,-2.75909 c -16.22996,-3.246 -25.72451,-7.62812 -29.94431,-13.38972 a 4.057497,4.057497 0 0 1 -0.6492,-1.37953 84.39594,84.39594 0 0 1 -30.6747,5.03125 80.338443,80.338443 0 0 1 -34.975624,-8.92646 59.969813,59.969813 0 0 1 -13.470882,-8.76424 l -0.649166,-0.73032 q -1.379568,-2.02873 -2.596804,-3.97638 a 159.13504,159.13504 0 0 1 -46.174347,2.51568 l -33.3526071,-2.27222 -1.9476153,3.16485 a 4.3009472,4.3009472 0 0 1 -0.7303322,0.89267 59.645205,59.645205 0 0 1 -13.4709044,8.76416 80.41959,80.41959 0 0 1 -34.813318,8.92654 84.314793,84.314793 0 0 1 -30.67468,-5.03132 4.1386472,4.1386472 0 0 1 -0.649198,1.37957 c -4.138653,5.76165 -13.876642,10.14372 -29.700882,13.38973 l -20.93668,2.92141 c -23.12774,4.54438 -40.08808,3.73284 -51.53021,-2.43448 a 4.057497,4.057497 0 0 1 -1.05495,-0.8115 l -8.92651,-9.73802 c -6.41085,-9.41343 -11.19868,-25.39992 -14.85044,-49.17687 l -4.05748,-32.45999 a 34.082978,34.082978 0 0 1 10.87408,-29.78202 l 12.74053,-9.16996 a 44.957067,44.957067 0 0 1 40.57497,-4.46322 56.318064,56.318064 0 0 0 26.61719,3.48946 196.62632,196.62632 0 0 1 9.16994,-77.09246 93.809334,93.809334 0 0 1 -33.02802,-27.42869 l -6.00508,-13.14631 a 4.1386472,4.1386472 0 0 1 0,-1.13607 c -1.37956,-10.387219 -2.51567,-20.936696 -3.32716,-31.405036 a 60.700161,60.700161 0 0 1 -48.12192,-5.112444 c -17.52839,-9.413411 -31.64848,-28.402496 -41.87338,-56.561516 a 100.46363,100.46363 0 0 1 0.97381,-77.498194 c 10.79294,-23.533492 40.57497,-28.889382 88.0477,-16.229995 5.84279,-64.189615 42.84716,-108.659785 110.282761,-132.112105 a 290.02991,290.02991 0 0 1 67.111005,-15.01274 l 11.523288,-0.8115 c 9.169937,0 18.258752,0 27.185237,1.21725 a 290.19219,290.19219 0 0 1 67.516789,15.09389 c 67.19209,23.61463 104.27761,68.08481 110.20161,132.274408 47.63498,-12.983986 77.25472,-7.54695 88.12885,16.229984 a 99.408682,99.408682 0 0 1 0.97372,77.335905 C 311.6064,41.975968 297.7298,61.046219 280.44483,70.621893 a 60.943608,60.943608 0 0 1 -48.20305,4.869016 c -0.81156,10.468338 -1.86646,21.017822 -3.32717,31.405041 a 4.3820969,4.3820969 0 0 1 0,1.13609 l -6.00509,12.65938 a 93.322433,93.322433 0 0 1 -33.43377,28.15903 128.46037,128.46037 0 0 1 6.08623,23.2089 c 1.62301,2.92141 5.03127,6.16738 14.20127,4.86897 9.1699,-1.2984 23.12771,-4.13863 41.95451,-8.11497 40.575,-13.87665 66.13724,-21.2613 76.93013,-22.3974 a 107.03678,107.03678 0 0 1 31.64846,1.2984 66.86755,66.86755 0 0 1 32.94693,19.9629 48.121917,48.121917 0 0 1 16.22998,36.35514 50.312963,50.312963 0 0 1 -12.984,32.45999 l -16.7169,17.5284 a 4.057497,4.057497 0 0 1 -1.29837,0.89264 c -13.47092,5.92394 -22.64086,6.41085 -28.24018,1.62299 -5.59938,-4.78784 -6.41088,-14.03892 -2.5157,-28.3213 a 4.057497,4.057497 0 0 1 3.89523,-3.00254 22.235084,22.235084 0 0 0 17.12266,-10.22492 c 3.16479,-5.35586 -2.84024,-15.49963 -8.60193,-23.04659 -8.11496,-11.03636 -20.53091,-13.6332 -37.2478,-8.11496 l -28.64595,11.27977 a 176.41998,176.41998 0 0 1 -60.53784,18.90799 l -35.13796,2.19106 v 9.81912 a 57.535308,57.535308 0 0 0 26.69835,-3.24598 44.551318,44.551318 0 0 1 40.57497,4.13866 l 12.33482,9.00763 a 34.326426,34.326426 0 0 1 11.36096,30.18776 l -4.21978,31.56736 c -3.65175,23.93921 -8.11498,39.84462 -14.44468,48.68996 l -9.25112,10.22485 a 4.2197971,4.2197971 0 0 1 -1.05494,0.81154 53.153213,53.153213 0 0 1 -25.56225,5.51816 z m -69.95124,-23.61459 c 2.19106,2.75907 8.11499,6.57315 24.345,9.90029 l 20.44977,2.75906 c 20.93669,4.05755 36.3552,3.65174 46.01204,-1.29839 l 8.11496,-9.25109 a 125.62011,125.62011 0 0 0 13.22748,-44.87591 l 4.05746,-31.97311 a 26.049132,26.049132 0 0 0 -8.6019,-22.96541 l -11.68555,-8.11498 a 36.436324,36.436324 0 0 0 -33.2715,-3.08375 66.705254,66.705254 0 0 1 -29.53861,3.73296 447.78536,447.78536 0 0 1 -8.11493,64.18959 41.548769,41.548769 0 0 1 -24.99422,40.98074 z m -349.5128,11.03638 c 9.65684,4.86897 25.07532,5.35585 45.84971,1.29839 l 20.93669,-2.84027 c 16.22998,-3.246 22.072781,-7.06 24.344977,-9.81917 a 41.548769,41.548769 0 0 1 -25.318777,-41.38642 447.70426,447.70426 0 0 1 -8.11499,-64.18963 65.812606,65.812606 0 0 1 -29.45744,-3.89516 36.679774,36.679774 0 0 0 -33.43378,3.32713 l -11.92903,8.76419 a 25.805683,25.805683 0 0 0 -8.115,22.55969 l 4.0575,32.45998 a 122.53641,122.53641 0 0 0 13.14628,45.28167 z M 84.305415,324.13426 a 54.451612,54.451612 0 0 0 11.361003,7.14126 72.3046,72.3046 0 0 0 31.567322,8.11501 75.550599,75.550599 0 0 0 28.88939,-5.03126 c 18.33989,-6.97892 26.94177,-18.908 26.21144,-36.59871 a 4.4632471,4.4632471 0 0 1 0,-0.97374 443.48442,443.48442 0 0 0 8.11495,-68.32827 v -16.23 a 265.60377,265.60377 0 0 0 -2.51564,-38.5462 v 0 A 123.02332,123.02332 0 0 0 182.33457,151.853 l -43.33408,16.22998 a 407.53502,407.53502 0 0 1 -105.494936,13.22743 405.7497,405.7497 0 0 1 -99.570987,-13.552 l -43.820967,-16.23 c -6.97889,17.93414 -9.81914,43.57746 -8.11498,76.52438 v 0 a 443.8902,443.8902 0 0 0 8.11498,68.24713 4.057497,4.057497 0 0 1 0,0.97381 c -0.73034,17.69063 8.11499,29.7008 26.211432,36.59862 a 75.631748,75.631748 0 0 0 28.159038,5.11237 72.3046,72.3046 0 0 0 31.567322,-8.11499 54.61391,54.61391 0 0 0 11.117553,-7.30346 l 2.9213999,-4.70671 v 0 a 26.292581,26.292581 0 0 0 2.8402336,-24.34494 l -8.1149865,-9.33226 a 4.057497,4.057497 0 0 1 3.083686,-6.6543 46.093166,46.093166 0 0 0 21.0989852,-5.11249 C 17.762462,259.05205 11.595068,252.39779 5.1842231,248.2591 l -20.1251781,-8.60187 c -19.719444,-8.115 -31.567335,-19.15136 -35.137933,-32.45997 a 4.2197971,4.2197971 0 0 1 0,-1.13609 v -15.41848 a 4.057497,4.057497 0 0 1 4.057493,-3.97639 v 0 a 4.057497,4.057497 0 0 1 3.97635,4.13865 v 14.76932 c 3.083699,10.30601 13.308592,19.23254 30.350084,26.37372 l 21.0989857,9.16994 c 10.1437453,6.49199 18.8267763,18.01526 6.2485353,37.57243 a 4.057497,4.057497 0 0 1 -1.541853,1.37957 54.776214,54.776214 0 0 1 -17.6906829,5.92392 l 3.08370845,3.73291 a 4.057497,4.057497 0 0 1 0.5680461,0.89264 31.973077,31.973077 0 0 1 0,26.86063 l 29.70087635,2.02875 a 161.08263,161.08263 0 0 0 42.035664,-1.78532 32.459978,32.459978 0 0 1 -0.649213,-25.31876 4.057497,4.057497 0 0 1 0.56807,-0.89267 l 3.895207,-4.95012 a 54.61391,54.61391 0 0 1 -18.015301,-6.00511 4.057497,4.057497 0 0 1 -1.541854,-1.37954 c -12.497074,-19.55714 -3.814042,-31.08041 5.680513,-37.24785 l 21.261295,-9.25109 c 17.122634,-7.22233 27.347524,-16.22997 30.431204,-26.37372 v -14.76928 a 4.057497,4.057497 0 0 1 3.97635,-4.13863 3.9763471,3.9763471 0 0 1 4.13864,3.97631 v 15.41851 a 4.2197971,4.2197971 0 0 1 0,1.1361 c -3.57056,13.14628 -15.41849,24.34499 -35.219056,32.45998 l -20.693227,8.92649 c -5.842821,3.89518 -12.010192,10.46835 -3.246017,24.8319 a 46.093166,46.093166 0 0 0 21.098963,5.11238 4.057497,4.057497 0 0 1 3.164875,6.57317 l -8.115009,10.46839 a 26.211433,26.211433 0 0 0 2.515661,22.23507 v 0 a 59.482908,59.482908 0 0 0 3.245995,5.59927 z M 355.10276,232.43489 c -2.10988,8.84536 -1.86645,15.09388 0.64922,17.28494 2.51568,2.19103 9.5757,1.37955 18.90794,-2.59682 l 16.23,-16.87916 a 41.792219,41.792219 0 0 0 10.87405,-27.18521 40.57497,40.57497 0 0 0 -14.20119,-30.18783 59.158308,59.158308 0 0 0 -29.21402,-17.77179 99.002936,99.002936 0 0 0 -29.21397,-1.13611 517.33091,517.33091 0 0 0 -75.63175,22.15393 q -29.13282,6.41082 -42.92832,8.11496 a 25.643382,25.643382 0 0 1 -13.71435,-1.13611 c 0.81154,7.46581 1.37957,15.58081 1.62303,24.34501 l 34.32643,-2.19107 a 169.19763,169.19763 0 0 0 57.94104,-18.17756 l 29.29512,-11.60441 c 20.36863,-6.89778 35.94945,-3.32719 46.49892,10.63062 10.5495,13.9578 13.55205,24.34496 8.76426,32.45997 a 32.459978,32.459978 0 0 1 -20.20641,13.87664 z m -466.20641,-89.91413 46.823517,17.36609 a 397.63471,397.63471 0 0 0 97.379926,13.14629 401.04302,401.04302 0 0 0 103.222717,-12.82172 l 46.41779,-17.20378 a 89.832989,89.832989 0 0 0 33.19033,-26.53602 l 5.11246,-11.44215 c 1.54181,-11.847881 2.75908,-23.858071 3.57057,-35.705979 0.8115,-11.847884 1.37958,-24.344981 1.62301,-35.543652 v 0 c 1.05496,-23.046601 1.21723,-45.038228 0,-65.325719 v 0 l -0.9738,-35.21907 c -14.28241,-38.87082 -39.52,-61.59281 -77.09243,-69.46436 a 81.149941,81.149941 0 0 0 -54.532781,8.11499 94.458535,94.458535 0 0 1 -28.240186,5.3559 c -5.680466,0.73035 -11.929027,1.21726 -18.339872,1.46071 v 0 h -5.274753 a 164.08518,164.08518 0 0 1 -35.7871272,-1.46071 94.052786,94.052786 0 0 1 -27.9155928,-6.00508 81.149941,81.149941 0 0 0 -54.695043,-8.115 c -37.653575,8.115 -62.891205,30.59352 -77.092465,69.464348 l -1.21723,35.056779 v 0 c -0.73037,20.368637 -0.6492,42.360256 0,65.406856 v 0 c 0,11.442123 1.05494,23.371174 1.7853,35.543676 0.73035,12.172478 1.94759,23.858103 3.57059,35.624811 l 5.43704,12.0102 a 90.969088,90.969088 0 0 0 33.02803,26.29259 z M 232.72866,66.807852 a 52.422864,52.422864 0 0 0 43.82096,-3.732897 C 292.04931,54.959968 304.62751,37.18812 313.95975,10.97669 a 91.618284,91.618284 0 0 0 -0.6492,-71.168498 c -9.00762,-19.800578 -35.94945,-23.533483 -80.0138,-11.279841 0,1.217245 0,2.515648 0,3.814048 l 1.0549,29.619728 a 49.339165,49.339165 0 0 1 22.96549,-3.570595 v 0 a 23.371185,23.371185 0 0 1 17.20377,8.926491 c 5.92392,8.114992 7.38465,20.125189 4.30092,37.6535775 a 4.3009472,4.3009472 0 0 1 0,0.9737991 l -8.92651,20.2874774 a 30.18778,30.18778 0 0 1 -35.86827,13.308596 c -0.24388,8.845341 -0.7303,18.015301 -1.29839,27.266379 z M -204.83183,-78.937449 c -18.98909,0 -31.32387,6.086247 -36.92323,18.177593 a 92.592083,92.592083 0 0 0 -0.6492,71.411951 c 9.25109,26.21143 21.91049,43.739827 37.41014,51.935956 a 52.179415,52.179415 0 0 0 43.73982,3.895207 c -0.56806,-9.332246 -1.05497,-18.421039 -1.46072,-27.347547 a 29.70088,29.70088 0 0 1 -34.97563,-12.659382 l -9.25108,-21.0178333 a 4.2197971,4.2197971 0 0 1 0,-0.892644 c -3.0837,-17.5283937 -1.623,-29.7820307 4.30094,-37.6535777 a 23.371185,23.371185 0 0 1 17.28495,-8.520742 49.176867,49.176867 0 0 1 22.88428,3.570595 l 1.05494,-29.700875 v 0 c 0,-1.217253 0,-2.515656 0,-3.732901 a 165.87049,165.87049 0 0 0 -43.41521,-7.4658 z M 234.35165,31.426486 a 21.991635,21.991635 0 0 0 28.15908,-8.926508 l 8.11496,-19.1513797 c 2.51562,-14.6881413 1.54188,-25.0753333 -2.84024,-30.8369823 a 15.418489,15.418489 0 0 0 -11.52329,-5.68049 43.090621,43.090621 0 0 0 -21.82934,4.138643 c 0.89263,18.664488 0.81147,38.9519711 -0.0812,60.456717 z m -433.66529,-28.8082392 8.7642,19.8005892 a 21.667035,21.667035 0 0 0 27.67213,8.114986 c -0.73036,-21.1801292 -0.8115,-41.467611 0,-60.456702 a 42.928318,42.928318 0 0 0 -22.47853,-3.976345 15.418489,15.418489 0 0 0 -11.5233,5.680493 c -3.97635,5.842798 -4.70669,16.148838 -2.4345,30.8369788 z M 131.61581,-146.04845 a 88.778039,88.778039 0 0 1 18.17764,1.86645 105.49493,105.49493 0 0 1 73.03495,52.909768 C 213.98301,-146.12961 179.81889,-183.13397 119.68681,-203.90835 a 282.32063,282.32063 0 0 0 -65.406865,-14.60699 c -8.683057,-0.81152 -17.447254,-1.21725 -26.130286,-1.21725 l -11.036386,0.8115 a 282.2395,282.2395 0 0 0 -64.919963,14.60698 c -60.53786,21.01784 -94.53968,58.10335 -103.30388,112.960721 a 105.49493,105.49493 0 0 1 73.03494,-52.990921 89.264933,89.264933 0 0 1 59.888679,8.115 89.264933,89.264933 0 0 0 25.1564815,5.35591 v 0 c 6.6542965,0.64921 14.4446875,1.21724 23.2900275,1.62299 5.437039,0 10.792935,0 16.229972,0 h 0.568071 c 6.167394,0 12.091335,-0.6492 17.690683,-1.37955 a 89.264933,89.264933 0 0 0 25.562243,-5.3559 91.050238,91.050238 0 0 1 41.305283,-10.06259 z M 47.138743,51.308213 A 35.056775,35.056775 0 0 1 29.691512,47.169554 12.983991,12.983991 0 0 1 21.170765,35.483979 14.03894,14.03894 0 0 1 29.691512,23.311478 38.302774,38.302774 0 0 1 47.138743,19.578579 36.598623,36.598623 0 0 1 64.504831,23.311478 14.03894,14.03894 0 0 1 73.10672,35.402837 13.146291,13.146291 0 0 1 64.342546,47.169554 33.352626,33.352626 0 0 1 47.138743,51.308213 Z m 0,-23.533482 a 30.18778,30.18778 0 0 0 -13.389738,2.840258 c -2.759114,1.54183 -4.219801,3.245994 -4.219801,4.86899 0,1.622997 1.460687,3.083686 4.219801,4.463255 a 27.26638,27.26638 0 0 0 13.63319,3.245994 25.805683,25.805683 0 0 0 13.308595,-3.083709 c 3.083685,-1.541854 4.544374,-3.083686 4.544374,-4.62554 0,-1.541853 -1.460689,-3.32716 -4.463231,-4.950157 A 28.72708,28.72708 0 0 0 47.138743,27.774731 Z M 161.96594,41.164469 c -4.21982,0 -7.62812,-3.002542 -10.22493,-8.926484 a 44.794768,44.794768 0 0 1 -2.7591,-17.041493 47.959618,47.959618 0 0 1 2.67798,-16.2299928 c 2.75907,-5.8427945 6.16737,-8.6830418 10.30605,-8.6830418 2.92135,0 6.97887,1.4607021 9.81911,8.6018919 a 42.197971,42.197971 0 0 1 3.16487,16.3111427 39.520022,39.520022 0 0 1 -3.246,16.716875 c -2.10992,6.167417 -5.43707,9.251102 -9.73798,9.251102 z m 0,-43.0094691 c 0,0 -1.37957,0.6492017 -2.84028,3.7328965 a 40.57497,40.57497 0 0 0 -2.02873,13.3085956 36.842075,36.842075 0 0 0 2.10988,13.470881 c 1.54185,3.489446 2.67797,3.895207 2.75913,3.97635 0.081,0.08121 1.05493,-0.486904 2.27219,-3.895184 A 32.459978,32.459978 0 0 0 166.8349,15.196492 34.407578,34.407578 0 0 0 164.31927,1.4010015 c -1.21724,-2.4345023 -2.19107,-3.2460016 -2.35333,-3.2460016 z M -75.803421,41.164469 c -4.2198,0 -7.628088,-3.002542 -10.224899,-8.926484 a 44.713618,44.713618 0 0 1 -2.75909,-17.041493 48.121917,48.121917 0 0 1 2.677956,-16.2299928 c 2.759091,-5.8427945 6.16739,-8.6830418 10.306033,-8.6830418 2.921394,0 6.978895,1.4607021 9.819145,8.6018919 a 42.36027,42.36027 0 0 1 3.164851,16.3111427 39.520022,39.520022 0 0 1 -3.246008,16.716875 c -2.109889,6.167417 -5.680499,9.251102 -9.737988,9.251102 z m 0,-43.0094691 c 0,0 -1.379554,0.6492017 -2.840249,3.7328965 a 40.57497,40.57497 0 0 0 -2.028748,13.3085956 36.679774,36.679774 0 0 0 2.109905,13.470881 c 1.541839,3.489446 2.677946,3.895207 2.759092,3.97635 0.08115,0.08121 1.05495,-0.486904 2.272202,-3.895184 a 31.973077,31.973077 0 0 0 2.596792,-13.552047 34.407578,34.407578 0 0 0 -2.515647,-13.7954905 c -1.217253,-2.4345023 -2.191046,-3.2460016 -2.353347,-3.2460016 z\"\n         inkscape:connector-curvature=\"0\"\n         inkscape:export-xdpi=\"72\"\n         inkscape:export-ydpi=\"72\"\n         style=\"stroke-width:3.06708455;stroke-miterlimit:4;stroke-dasharray:none\" />\n    </g>\n  </g>\n</svg>\n";

	//monkey by cinnamon stick from the Noun Project by https://thenounproject.com/cinnamonstick91

	var Page = {
	    autologin: false,
	    getOptions: function getOptions() {
	        var options = [];
	        for (var name in Game$1.worlds) {
	            var world = Game$1.worlds[name];
	            options.push(
	                v( 'option', { value: name, disabled: world.disabled, selected: world.selected }, "World ", name, " - (", world.playerCount, "/", world.maxPlayers, ")")
	            );
	        }
	        return options;
	    },
	    selectWorld: function selectWorld(e) {
	        Game$1.selectWorld(e.target.value);
	    },
	    play: function play() {
	        Game$1.connectServer();
	    },
	    onupdate: function onupdate() {
	        if (Game$1.player) {
	            v.routes.go('/game');
	            return;
	        }

	        if (Page.autologin && Game$1.is.ready && !Game$1.is.connecting && !Game$1.is.connected) {
	            Page.play();
	        }
	    },
	    oninput: function oninput(e) {
	        Game$1.name = e.target.value.trim().slice(0, 23);
	    },
	    view: function view() {
	        return v( 'article', { onupdate: Page.onupdate },
	            v( Panel, { position: "center middle" },
	                v( 'div', { class: "logo", 'data-color': "black" },
	                    v.trust(logo), "MonkeyTown.io"),
	                v( 'div', { 'data-flex': "" },
	                    v( Panel, { position: "inline", color: "black" },
	                        v( 'form', null,
	                            v( 'input', { placeholder: "Player name", oninput: Page.oninput, value: Game$1.name }),
	                            v( 'select', { onchange: Page.selectWorld },
	                                Page.getOptions()
	                            ),
	                            v( 'button', {
	                                onclick: Page.play, 'data-background': "success", disabled: !Game$1.is.ready || Game$1.is.connecting, class: "w100" },
	                                Game$1.is.connecting ? 'Connecting...' : Game$1.is.ready ? 'Play' : 'Loading...'
	                            )
	                        )
	                    ),
	                    v( Panel, { position: "inline", color: "black" },
	                        v( 'div', { class: "text-justify" },
	                            v( 'h3', null, "How to play" ), "Collect resources to buy better equipement and gold to be the number one. ", v( 'br', null ), v( 'br', null ), v( 'h3', null, "Controls" ),
	                            v( 'code', null, "WASD" ), " To move ", v( 'br', null ), v( 'code', null, "Mouse" ), " To look ", v( 'br', null ), v( 'code', null, "Left button" ), " To gather resources / fight other players ", v( 'br', null ), v( 'code', null, "Mousewheel/1-4" ), " To equip item")
	                    )
	                )
	            ),
	            v( Panel, { position: "bottom right", color: "black" }, "Icon for logo by ", v( 'a', { href: "https://thenounproject.com/cinnamonstick91", title: "cinnamonstick91", 'data-color': "info", target: "_blank", rel: "no-follow" }, "cinnamonstick91")
	            )
	        );
	    }
	};

	var Page$1 = {
	    onupdate: function onupdate() {
	        if (!Game$1.player) {
	            v.routes.go('/');
	        }
	    },
	    itemColors: {
	        0: 'black',
	        1: 'stone',
	        2: 'iron',
	        3: 'silver',
	        4: 'gold'
	    },
	    buy: function buy(event) {
	        Game$1.player.runScript('buy', event.target.dataset.id);
	    },
	    getBuyButton: function getBuyButton(id, item, level) {
	        var label;
	        switch (level) {
	            case 0:
	                label = [
	                    ("Stone " + (item.name) + " ("),
	                    v( 'span', { title: "Wood" }, v( Icon, { icon: 'wood', color: 'wood', size: "xs" }), " ", item.wood),
	                    ' | ',
	                    v( 'span', { title: "Stone" }, v( Icon, { icon: 'stone', color: 'stone', size: "xs" }), " ", item.stone),
	                    ')'
	                ];
	                break;
	            case 1:
	                label = [
	                    ("Iron " + (item.name) + " ("),
	                    v( 'span', { title: "Wood" }, v( Icon, { icon: 'wood', color: 'wood', size: "xs" }), " ", item.wood),
	                    ' | ',
	                    v( 'span', { title: "Stone" }, v( Icon, { icon: 'stone', color: 'stone', size: "xs" }), " ", item.stone),
	                    ' | ',
	                    v( 'span', { title: "Iron" }, v( Icon, { icon: 'stone', color: 'iron', size: "xs" }), " ", item.stone),
	                    ')'
	                ];
	                break;
	            case 2:
	                label = [
	                    ("Silver " + (item.name) + " ("),
	                    v( 'span', { title: "Wood" }, v( Icon, { icon: 'wood', color: 'wood', size: "xs" }), " ", item.wood),
	                    ' | ',
	                    v( 'span', { title: "Stone" }, v( Icon, { icon: 'stone', color: 'stone', size: "xs" }), " ", item.stone),
	                    ' | ',
	                    v( 'span', { title: "Silver" }, v( Icon, { icon: 'stone', color: 'silver', size: "xs" }), " ", item.stone),
	                    ')'
	                ];
	                break;
	            case 3:
	                label = [
	                    ("Golden " + (item.name) + " ("),
	                    v( 'span', { title: "Wood" }, v( Icon, { icon: 'wood', color: 'wood', size: "xs" }), " ", item.wood),
	                    ' | ',
	                    v( 'span', { title: "Stone" }, v( Icon, { icon: 'stone', color: 'stone', size: "xs" }), " ", item.stone),
	                    ' | ',
	                    v( 'span', { title: "Gold" }, v( Icon, { icon: 'stone', color: 'gold', size: "xs" }), " ", item.stone),
	                    ')'
	                ];
	                break;
	        }

	        return v( 'div', null, v( 'button', { onclick: Page$1.buy, 'data-id': id, 'data-background': "success" }, label) );
	    },
	    getStore: function getStore() {
	        var items = Object.keys(config_6).map(function (id) {
	            var item = config_6[id];
	            if (item.buyable) {
	                var resources = Game$1.player[config_1.Resources];
	                var level = Game$1.player[config_1.Inventory][id];
	                if (
	                    level === 0
	                    && item.wood <= resources[config_5.Wood]
	                    && item.stone <= resources[config_5.Stone]
	                ) {
	                    return Page$1.getBuyButton(id, item, level);
	                }

	                if (
	                    level === 1
	                    && item.wood <= resources[config_5.Wood]
	                    && item.stone <= resources[config_5.Stone]
	                    && item.stone <= resources[config_5.Iron]
	                ) {
	                    return Page$1.getBuyButton(id, item, level);
	                }

	                if (
	                    level === 2
	                    && item.wood <= resources[config_5.Wood]
	                    && item.stone <= resources[config_5.Stone]
	                    && item.stone <= resources[config_5.Silver]
	                ) {
	                    return Page$1.getBuyButton(id, item, level);
	                }

	                if (
	                    level === 3
	                    && item.wood <= resources[config_5.Wood]
	                    && item.stone <= resources[config_5.Stone]
	                    && item.stone <= resources[config_5.Gold]
	                ) {
	                    return Page$1.getBuyButton(id, item, level);
	                }
	            }
	        });

	        items = items.filter(function (item) { return item !== undefined; });

	        if (items.length > 0) {
	            return v( Panel, { title: "Store", position: "top center", color: "black" }, items);
	        }
	    },
	    getItems: function getItems() {
	        var equipedId = Object.keys(config_6)[Game$1.player[config_1.Equiped]];

	        return Object.keys(config_6).map(function (id) {
	            var item = config_6[id];
	            var level = Game$1.player[config_1.Inventory][id];
	            var selected = equipedId === id;
	            return v( Panel, { position: "inline", color: "black", border: selected ? "success" : "" },
	                v( 'div', { title: item.name !== 'Apple' ? item.name : 'Food' },
	                    v( Icon, { icon: item.name.toLowerCase(), color: item.color || Page$1.itemColors[level], size: "md" })
	                )
	            );
	        });
	    },
	    getResources: function getResources() {
	        return [
	            v( 'div', { title: "Wood" }, v( Icon, { icon: 'wood', color: 'wood', size: "md" }), " ", Game$1.player[config_1.Resources][config_5.Wood]),
	            v( 'div', { title: "Stone" }, v( Icon, { icon: 'stone', color: 'stone', size: "md" }), " ", Game$1.player[config_1.Resources][config_5.Stone]),
	            v( 'div', { title: "Iron" }, v( Icon, { icon: 'stone', color: 'iron', size: "md" }), " ", Game$1.player[config_1.Resources][config_5.Iron]),
	            v( 'div', { title: "Silver" }, v( Icon, { icon: 'stone', color: 'silver', size: "md" }), " ", Game$1.player[config_1.Resources][config_5.Silver]),
	            v( 'div', { title: "Gold" }, v( Icon, { icon: 'stone', color: 'gold', size: "md" }), " ", Game$1.player[config_1.Resources][config_5.Gold]),
	            v( 'div', { title: "Food" }, v( Icon, { icon: 'apple', color: 'apple', size: "md" }), " ", Game$1.player[config_1.Resources][config_5.Food])
	        ];
	    },
	    getLeaderboard: function getLeaderboard() {
	        return Game$1.leaderboard.map(function (item, index) {
	            return v( 'div', { style: item.id === Game$1.player.id ? 'color: #7ac31b' : '' }, index + 1, ". ", item.name, " (", item.score, ")");
	        });
	    },
	    getMinimap: function getMinimap() {
	        return v( 'div', { onupdate: function (vnode) {
	            vnode.dom.appendChild(Game$1.minimap.element);
	        } });
	    },
	    view: function view() {
	        if (Game$1.player) {
	            if (Game$1.player[config_1.HasDied]) {
	                return v( 'article', { oninit: Page$1.onupdate, onupdate: Page$1.onupdate },
	                    v( Panel, { position: "center middle", color: "black" }, "You died!")
	                );
	            }

	            return v( 'article', { oninit: Page$1.onupdate, onupdate: Page$1.onupdate },
	                v( Panel, { position: "left top" }, Page$1.getMinimap()),
	                Page$1.getStore(),
	                v( Panel, { title: "Leaderboard", position: "top right", color: "black" }, Page$1.getLeaderboard()),
	                v( Panel, { position: "bottom center" }, Page$1.getItems()),
	                v( Panel, { position: "bottom right" }, Page$1.getResources())
	            );
	        }
	        return v( 'article', { oninit: Page$1.onupdate, onupdate: Page$1.onupdate });
	    }
	};

	var Pages = {
	    Main: Main,
	    Home: Page,
	    Game: Page$1
	};

	var router = v.Router();
	router
	    .get('/', function () { return Pages.Home; })
	    .get('/game', function () { return Pages.Game; })
	;

	v.routes('#ui', router);

	if (v.is.browser) {
	    Game$1.initGame();
	    setInterval(function () { return v.update(); }, 100);
	    v.sw('/sw.js');
	}

	// Export what is needed for the backend
	var index = {Pages: Pages};

	return index;

})));
//# sourceMappingURL=index.min.js.map
